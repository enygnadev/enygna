'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { auth, db } from '@/src/lib/firebase';
import { onAuthStateChanged, signOut, createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { doc, getDoc, collection, addDoc, getDocs, query, where, serverTimestamp, setDoc, updateDoc } from 'firebase/firestore';
import ThemeSelector from '@/src/components/ThemeSelector';
import { useRouter } from 'next/navigation'; // Import useRouter

interface Veiculo {
  id: string;
  placa: string;
  renavam: string;
  marca: string;
  modelo: string;
  ano: number;
  cor: string;
  condutor: string;
  status: 'ativo' | 'manutencao' | 'inativo' | 'em_viagem';
  pais: string;
  cidade: string;
  multas: number;
  valorMultas: number;
  vencimentoIPVA: string;
  vencimentoLicenciamento: string;
  kmRodados: number;
  consumoMedio: number;
  ultimaManutencao: string;
  proximaManutencao: string;
  seguro: {
    vencimento: string;
    valor: number;
    seguradora: string;
  };
  gps: {
    latitude: number;
    longitude: number;
    ultimaAtualizacao: string;
  };
  combustivel: {
    nivel: number;
    tipo: string;
    custoMes: number;
  };
}

interface FleetStats {
  totalVeiculos: number;
  veiculosAtivos: number;
  multasPendentes: number;
  motoristasCadastrados: number;
  totalDebitos: number;
  kmTotalMes: number;
  consumoTotalCombustivel: number;
  custosManutencao: number;
}

export default function FrotaPage() {
  const router = useRouter(); // Initialize router
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [hasAccess, setHasAccess] = useState(false);
  const [userPermissions, setUserPermissions] = useState<any>(null);
  const [veiculos, setVeiculos] = useState<Veiculo[]>([]);
  const [filteredVeiculos, setFilteredVeiculos] = useState<Veiculo[]>([]);
  const [stats, setStats] = useState<FleetStats>({
    totalVeiculos: 0,
    veiculosAtivos: 0,
    multasPendentes: 0,
    motoristasCadastrados: 0,
    totalDebitos: 0,
    kmTotalMes: 0,
    consumoTotalCombustivel: 0,
    custosManutencao: 0,
  });

  // Estados de controle
  const [selectedCountry, setSelectedCountry] = useState(0);
  const [statusFilter, setStatusFilter] = useState('todos');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedVehicle, setSelectedVehicle] = useState<Veiculo | null>(null);
  const [detailsModalOpen, setDetailsModalOpen] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [addVehicleModal, setAddVehicleModal] = useState(false);
  const [aiAnalysisModal, setAiAnalysisModal] = useState(false);
  const [newVehicle, setNewVehicle] = useState<Partial<Veiculo>>({});
  const [aiInsights, setAiInsights] = useState<any[]>([]);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', type: 'success' });

  // Estados para modal de adicionar colaborador
  const [showAddColaboradorModal, setShowAddColaboradorModal] = useState(false);
  const [newColaborador, setNewColaborador] = useState({
    nome: '',
    email: '',
    senha: ''
  });
  const [isAddingColaborador, setIsAddingColaborador] = useState(false);

  // Estados para modal de adicionar ve√≠culo
  const [showAddVehicleModal, setShowAddVehicleModal] = useState(false);
  const [newVehicleData, setNewVehicleData] = useState({
    marca: '',
    modelo: '',
    placa: '',
    ano: '',
    cor: ''
  });
  const [isAddingVehicle, setIsAddingVehicle] = useState(false);

  // Estados para atribuir colaborador
  const [showAtribuirModal, setShowAtribuirModal] = useState(false);
  const [veiculoParaAtribuir, setVeiculoParaAtribuir] = useState<Veiculo | null>(null);
  const [colaboradoresDisponiveis, setColaboradoresDisponiveis] = useState<any[]>([]);
  const [colaboradorSelecionado, setColaboradorSelecionado] = useState('');
  const [isAtribuindo, setIsAtribuindo] = useState(false);

  const countries = ['üåç Todos', 'üáßüá∑ Brasil', 'üá∫üá∏ EUA', 'üá¶üá∑ Argentina', 'üá®üá± Chile', 'üáµüá™ Peru', 'üá®üá¥ Col√¥mbia'];

  // Fun√ß√£o para gerar an√°lise IA
  const generateAIAnalysis = async () => {
    try {
      setLoading(true);

      // Simular an√°lise IA baseada nos dados da frota
      const insights = [
        {
          id: 1,
          titulo: "Otimiza√ß√£o de Rotas Detectada",
          descricao: "Baseado nos padr√µes de GPS, 23% dos ve√≠culos podem otimizar suas rotas para economizar combust√≠vel.",
          prioridade: "alta",
          confianca: 87,
          economia_estimada: "2.840",
          risk_score: 3
        },
        {
          id: 2,
          titulo: "Manuten√ß√£o Preventiva Recomendada",
          descricao: `${stats.veiculosAtivos} ve√≠culos est√£o pr√≥ximos do limite de quilometragem para manuten√ß√£o.`,
          prioridade: "media",
          confianca: 74,
          economia_estimada: "1.250",
          risk_score: 6
        },
        {
          id: 3,
          titulo: "Padr√µes de Consumo An√¥malos",
          descricao: "Detectados padr√µes irregulares de consumo em 12% da frota. Poss√≠vel necessidade de calibra√ß√£o.",
          prioridade: "baixa",
          confianca: 92,
          economia_estimada: "890",
          risk_score: 2
        }
      ];

      setAiInsights(insights);
      setAiAnalysisModal(true);
      showSnackbar('An√°lise IA conclu√≠da com sucesso!', 'success');
    } catch (error) {
      console.error('Erro na an√°lise IA:', error);
      showSnackbar('Erro ao gerar an√°lise IA', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Verificar permiss√µes do usu√°rio
  const checkUserPermissions = async (userEmail: string) => {
    try {
      setLoading(true);
      const usuariosRef = collection(db, 'users');
      const q = query(usuariosRef, where('email', '==', userEmail));
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        const userData = querySnapshot.docs[0].data();
        setUserPermissions(userData);

        const role = userData.role?.toLowerCase();
        const canAccessFleet = role === 'superadmin' || role === 'admin' || role === 'gestor' || role === 'colaborador';
        setHasAccess(canAccessFleet);

        if (canAccessFleet) {
          showSnackbar('Acesso autorizado ao sistema de frota!', 'success');
        } else {
          showSnackbar('Acesso negado ao sistema de frota', 'error');
        }
      } else {
        setHasAccess(false);
        showSnackbar('Usu√°rio n√£o encontrado no sistema', 'error');
      }
    } catch (error) {
      console.error('Erro ao verificar permiss√µes:', error);
      setHasAccess(false);
      showSnackbar('Erro ao verificar permiss√µes do usu√°rio', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Carregar dados do Firestore
  const loadVeiculos = async () => {
    if (!user) return;

    try {
      setLoading(true);
      
      // Buscar dados do usu√°rio para obter empresaId
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const userData = userDoc.exists() ? userDoc.data() : null;
      let empresaId = userData?.empresaId;

      // Se n√£o encontrar empresaId no usu√°rio, buscar empresa onde √© admin
      if (!empresaId) {
        console.log('Buscando empresa do usu√°rio...');
        const empresasSnap = await getDocs(collection(db, 'empresas'));

        for (const empresaDoc of empresasSnap.docs) {
          const empresaData = empresaDoc.data();
          if (empresaData.adminId === user.uid || empresaData.email === user.email) {
            empresaId = empresaDoc.id;
            console.log('Empresa encontrada para carregar ve√≠culos:', empresaId);
            break;
          }
        }
      }

      if (!empresaId) {
        console.log('Empresa n√£o encontrada para carregar ve√≠culos');
        showSnackbar('Empresa n√£o encontrada para carregar ve√≠culos', 'error');
        return;
      }

      // Buscar ve√≠culos na subcole√ß√£o da empresa
      const veiculosRef = collection(db, 'empresas', empresaId, 'veiculos');
      const querySnapshot = await getDocs(veiculosRef);

      const veiculosData: Veiculo[] = [];
      querySnapshot.forEach((doc) => {
        veiculosData.push({ id: doc.id, ...doc.data() } as Veiculo);
      });

      console.log('Ve√≠culos carregados:', veiculosData.length);
      setVeiculos(veiculosData);
      calculateStats(veiculosData);
    } catch (error) {
      console.error('Erro ao carregar ve√≠culos:', error);
      showSnackbar('Erro ao carregar dados da frota', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Calcular estat√≠sticas
  const calculateStats = (veiculosData: Veiculo[]) => {
    const newStats: FleetStats = {
      totalVeiculos: veiculosData.length,
      veiculosAtivos: veiculosData.filter(v => v.status === 'ativo').length,
      multasPendentes: veiculosData.reduce((sum, v) => sum + v.multas, 0),
      motoristasCadastrados: new Set(veiculosData.map(v => v.condutor)).size,
      totalDebitos: veiculosData.reduce((sum, v) => sum + v.valorMultas, 0),
      kmTotalMes: veiculosData.reduce((sum, v) => sum + v.kmRodados, 0),
      consumoTotalCombustivel: veiculosData.reduce((sum, v) => sum + (v.combustivel?.custoMes || 0), 0),
      custosManutencao: veiculosData.length * 450,
    };
    setStats(newStats);
  };

  // Carregar colaboradores dispon√≠veis
  const loadColaboradoresDisponiveis = async () => {
    if (!user) return;

    try {
      // Buscar dados do usu√°rio para obter empresaId
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const userData = userDoc.exists() ? userDoc.data() : null;
      let empresaId = userData?.empresaId;

      // Se n√£o encontrar empresaId no usu√°rio, buscar empresa onde √© admin
      if (!empresaId) {
        const empresasSnap = await getDocs(collection(db, 'empresas'));

        for (const empresaDoc of empresasSnap.docs) {
          const empresaData = empresaDoc.data();
          if (empresaData.adminId === user.uid || empresaData.email === user.email) {
            empresaId = empresaDoc.id;
            break;
          }
        }
      }

      if (!empresaId) {
        showSnackbar('Empresa n√£o encontrada', 'error');
        return;
      }

      // Buscar colaboradores da empresa
      const colaboradoresSnap = await getDocs(collection(db, 'empresas', empresaId, 'colaboradores'));
      const colaboradoresData = colaboradoresSnap.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      setColaboradoresDisponiveis(colaboradoresData);
    } catch (error) {
      console.error('Erro ao carregar colaboradores:', error);
      showSnackbar('Erro ao carregar colaboradores', 'error');
    }
  };

  // Filtrar ve√≠culos
  useEffect(() => {
    if (veiculos.length === 0) {
      setFilteredVeiculos([]);
      return;
    }

    let filtered = [...veiculos];

    if (selectedCountry > 0 && countries[selectedCountry]) {
      const countryName = countries[selectedCountry].split(' ')[1];
      filtered = filtered.filter(v => v.pais === countryName);
    }

    if (statusFilter !== 'todos') {
      filtered = filtered.filter(v => v.status === statusFilter);
    }

    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter(v => 
        v.placa?.toLowerCase().includes(searchLower) ||
        v.condutor?.toLowerCase().includes(searchLower) ||
        v.modelo?.toLowerCase().includes(searchLower)
      );
    }

    setFilteredVeiculos(filtered);
  }, [veiculos, selectedCountry, statusFilter, searchTerm]);

  // Fun√ß√£o para adicionar colaborador - Mesma l√≥gica do cart√£o ponto
  async function handleAddColaborador() {
    if (!user || !newColaborador.nome || !newColaborador.email || !newColaborador.senha) {
      showSnackbar('Preencha todos os campos obrigat√≥rios!', 'error');
      return;
    }

    try {
      setIsAddingColaborador(true);

      let empresaId: string | null = null;
      let userRole: string = '';

      console.log('Iniciando busca da empresa para o usu√°rio:', user.email);

      // 1. Primeiro tenta buscar no documento do usu√°rio
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      if (userDoc.exists()) {
        const userData = userDoc.data();
        empresaId = userData?.empresaId;
        userRole = userData?.role || '';

        console.log('Dados encontrados no documento do usu√°rio:', {
          empresaId,
          role: userRole,
          email: user.email
        });
      }

      // 2. Se n√£o encontrou empresaId, verifica se o usu√°rio √© dono da empresa (admin)
      if (!empresaId) {
        console.log('EmpresaId n√£o encontrado no documento do usu√°rio. Buscando empresas criadas pelo usu√°rio...');

        const empresasSnap = await getDocs(
          query(
            collection(db, 'empresas'),
            where('adminId', '==', user.uid)
          )
        );

        if (!empresasSnap.empty) {
          const empresaDoc = empresasSnap.docs[0];
          empresaId = empresaDoc.id;
          userRole = 'admin';

          console.log('Empresa encontrada onde usu√°rio √© admin:', {
            empresaId,
            adminId: user.uid,
            email: user.email
          });

          // Cria ou atualiza o documento do usu√°rio com o empresaId encontrado
          await setDoc(doc(db, 'users', user.uid), {
            empresaId: empresaId,
            role: userRole,
            email: user.email,
            displayName: user.displayName || user.email,
            dataCriacao: serverTimestamp(),
            lastLogin: serverTimestamp()
          }, { merge: true });
        }
      }

      // 3. Se ainda n√£o encontrou, busca em todas as empresas por colaborador
      if (!empresaId) {
        console.log('Usu√°rio n√£o √© admin de nenhuma empresa. Buscando como colaborador...');

        const empresasSnap = await getDocs(collection(db, 'empresas'));
        console.log('Total de empresas encontradas:', empresasSnap.docs.length);

        for (const empresaDoc of empresasSnap.docs) {
          console.log('Verificando empresa:', empresaDoc.id);

          // Verifica se o usu√°rio √© admin direto na empresa
          const empresaData = empresaDoc.data();
          if (empresaData.email === user.email || empresaData.adminId === user.uid) {
            empresaId = empresaDoc.id;
            userRole = 'admin';

            console.log('Usu√°rio encontrado como admin da empresa:', {
              empresaId: empresaDoc.id,
              email: user.email
            });

            // Cria ou atualiza o documento do usu√°rio
            await setDoc(doc(db, 'users', user.uid), {
              empresaId: empresaId,
              role: userRole,
              email: user.email,
              displayName: user.displayName || user.email,
              dataCriacao: serverTimestamp(),
              lastLogin: serverTimestamp()
            }, { merge: true });
            break;
          }

          // Se n√£o √© admin, verifica nos colaboradores
          const colaboradoresSnap = await getDocs(
            query(
              collection(db, 'empresas', empresaDoc.id, 'colaboradores'),
              where('email', '==', user.email)
            )
          );

          if (!colaboradoresSnap.empty) {
            const colaboradorData = colaboradoresSnap.docs[0].data();
            userRole = colaboradorData.role;
            empresaId = empresaDoc.id;

            console.log('Colaborador encontrado na empresa:', {
              empresaId: empresaDoc.id,
              role: userRole,
              email: user.email
            });

            // Cria ou atualiza o documento do usu√°rio com o empresaId encontrado
            await setDoc(doc(db, 'users', user.uid), {
              empresaId: empresaId,
              role: userRole,
              email: user.email,
              displayName: user.displayName || user.email,
              dataCriacao: serverTimestamp(),
              lastLogin: serverTimestamp()
            }, { merge: true });

            console.log('Documento do usu√°rio atualizado com empresaId:', empresaId);
            break;
          }
        }
      }

      // 4. Se o usu√°rio tem role superadmin, permite criar colaborador para qualquer empresa
      if (!empresaId && (userRole === 'superadmin' || userPermissions?.role === 'superadmin')) {
        // Para superadmin, vamos usar a primeira empresa dispon√≠vel ou permitir selecionar
        const empresasSnap = await getDocs(collection(db, 'empresas'));
        if (!empresasSnap.empty) {
          empresaId = empresasSnap.docs[0].id;
          console.log('SuperAdmin usando primeira empresa dispon√≠vel:', empresaId);
        }
      }

      // 5. Valida√ß√£o final se encontrou uma empresa
      if (!empresaId) {
        console.error('Nenhuma empresa encontrada para o usu√°rio:', user.email);

        // Mensagem mais detalhada para diferentes cen√°rios
        if (userRole === 'colaborador') {
          showSnackbar('Voc√™ n√£o tem permiss√£o para adicionar colaboradores. Apenas administradores podem adicionar novos colaboradores.', 'error');
        } else {
          showSnackbar('N√£o foi poss√≠vel identificar sua empresa. Verifique suas permiss√µes ou entre em contato com o suporte.', 'error');
        }
        return;
      }

      // 4. Verifica√ß√£o de permiss√£o para adicionar colaboradores
      const rolesPermitidos = ['superadmin', 'admin', 'gestor'];
      const hasPermission = rolesPermitidos.includes(userRole) || rolesPermitidos.includes(userPermissions?.role || '');

      if (!hasPermission) {
        console.error('Usu√°rio sem permiss√£o:', {
          userRole,
          userPermissionsRole: userPermissions?.role,
          email: user.email
        });
        showSnackbar('Voc√™ n√£o tem permiss√£o para adicionar colaboradores', 'error');
        return;
      }

      console.log('Criando colaborador para empresa:', empresaId, 'com permiss√µes v√°lidas');

      // 5. Criar conta no Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(
        auth, 
        newColaborador.email, 
        newColaborador.senha
      );

      // 6. Atualizar perfil do usu√°rio com o nome
      await updateProfile(userCredential.user, {
        displayName: newColaborador.nome
      });

      // 7. Criar documento principal do colaborador (igual ao cart√£o ponto)
      await setDoc(doc(db, 'users', userCredential.user.uid), {
        email: newColaborador.email,
        displayName: newColaborador.nome,
        role: 'colaborador',
        tipo: 'colaborador',
        empresaId: empresaId, // Vincula √† empresa automaticamente
        ativo: true,
        isPessoal: false,
        hourlyRate: 0,
        monthlySalary: 0,
        monthlyBaseHours: 220,
        toleranceMinutes: 0,
        lunchBreakMinutes: 0,
        lunchThresholdMinutes: 360,
        permissions: {
          frota: true,
          ponto: true,
          chamados: true,
          documentos: true
        },
        dataCriacao: serverTimestamp(),
        lastLogin: serverTimestamp()
      });

      // 8. Criar documento do colaborador na empresa (igual ao cart√£o ponto)
      await setDoc(doc(db, 'empresas', empresaId, 'colaboradores', userCredential.user.uid), {
        email: newColaborador.email,
        displayName: newColaborador.nome,
        role: 'colaborador',
        effectiveHourlyRate: 0,
        monthlySalary: 0,
        workDaysPerMonth: 22,
        salaryType: 'monthly',
        hourlyRate: 0,
        dailyRate: 0,
        monthlyRate: 0,
        monthlyBaseHours: 220,
        toleranceMinutes: 0,
        lunchBreakMinutes: 0,
        lunchThresholdMinutes: 360,
        ativo: true,
        isAuthUser: true, // Indica que tem conta Auth
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });

      console.log('Colaborador criado com sucesso! EmpresaId:', empresaId);
      showSnackbar(`Colaborador adicionado com sucesso! Vinculado √† empresa ${empresaId}`, 'success');
      setNewColaborador({ nome: '', email: '', senha: '' });
      setShowAddColaboradorModal(false);

    } catch (error: any) {
      console.error('Erro detalhado ao adicionar colaborador:', {
        error: error.message,
        code: error.code,
        userEmail: user.email,
        stack: error.stack
      });

      // Tratamento de erros espec√≠ficos
      if (error.code === 'auth/email-already-in-use') {
        showSnackbar('Este email j√° est√° sendo usado por outro usu√°rio', 'error');
      } else if (error.code === 'auth/weak-password') {
        showSnackbar('A senha deve ter pelo menos 6 caracteres', 'error');
      } else if (error.code === 'auth/invalid-email') {
        showSnackbar('Email inv√°lido', 'error');
      } else if (error.message?.includes('permission-denied')) {
        showSnackbar('Erro de permiss√£o. Verifique suas credenciais.', 'error');
      } else {
        showSnackbar(`Erro ao adicionar colaborador: ${error.message}`, 'error');
      }
    } finally {
      setIsAddingColaborador(false);
    }
  }

  // Fun√ß√£o para atribuir colaborador ao ve√≠culo
  const handleAtribuirColaborador = async () => {
    if (!veiculoParaAtribuir || !colaboradorSelecionado || !user) {
      showSnackbar('Selecione um colaborador', 'error');
      return;
    }

    setIsAtribuindo(true);

    try {
      // Buscar dados do usu√°rio para obter empresaId
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const userData = userDoc.exists() ? userDoc.data() : null;
      let empresaId = userData?.empresaId;

      // Se n√£o encontrar empresaId no usu√°rio, buscar empresa onde √© admin
      if (!empresaId) {
        const empresasSnap = await getDocs(collection(db, 'empresas'));

        for (const empresaDoc of empresasSnap.docs) {
          const empresaData = empresaDoc.data();
          if (empresaData.adminId === user.uid || empresaData.email === user.email) {
            empresaId = empresaDoc.id;
            break;
          }
        }
      }

      if (!empresaId) {
        showSnackbar('Empresa n√£o encontrada', 'error');
        return;
      }

      // Buscar dados do colaborador selecionado
      const colaboradorDoc = await getDoc(doc(db, 'empresas', empresaId, 'colaboradores', colaboradorSelecionado));
      if (!colaboradorDoc.exists()) {
        showSnackbar('Colaborador n√£o encontrado', 'error');
        return;
      }

      const colaboradorData = colaboradorDoc.data();

      // Atualizar o ve√≠culo com o novo condutor
      await updateDoc(doc(db, 'empresas', empresaId, 'veiculos', veiculoParaAtribuir.id), {
        condutor: colaboradorData.email,
        condutorNome: colaboradorData.displayName || colaboradorData.email,
        condutorId: colaboradorSelecionado,
        dataAtribuicao: serverTimestamp(),
        ultimaAtualizacao: serverTimestamp()
      });

      // Registrar no hist√≥rico
      await addDoc(collection(db, 'empresas', empresaId, 'atribuicoes'), {
        veiculoId: veiculoParaAtribuir.id,
        veiculoPlaca: veiculoParaAtribuir.placa,
        colaboradorId: colaboradorSelecionado,
        colaboradorEmail: colaboradorData.email,
        colaboradorNome: colaboradorData.displayName || colaboradorData.email,
        adminId: user.uid,
        adminEmail: user.email,
        tipo: 'atribuicao',
        timestamp: serverTimestamp()
      });

      showSnackbar(`Ve√≠culo ${veiculoParaAtribuir.placa} atribu√≠do a ${colaboradorData.displayName || colaboradorData.email}!`, 'success');
      
      // Fechar modal e limpar estados
      setShowAtribuirModal(false);
      setVeiculoParaAtribuir(null);
      setColaboradorSelecionado('');
      
      // Recarregar lista de ve√≠culos
      await loadVeiculos();

    } catch (error) {
      console.error('Erro ao atribuir colaborador:', error);
      showSnackbar('Erro ao atribuir colaborador ao ve√≠culo', 'error');
    } finally {
      setIsAtribuindo(false);
    }
  };

  // Fun√ß√£o para adicionar ve√≠culo
  async function handleAddVehicle() {
    if (!user || !newVehicleData.marca || !newVehicleData.modelo || !newVehicleData.placa) {
      alert('Preencha todos os campos obrigat√≥rios!');
      return;
    }

    setIsAddingVehicle(true);

    try {
      // Buscar dados do usu√°rio primeiro
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      const userData = userDoc.exists() ? userDoc.data() : null;
      let empresaId = userData?.empresaId;

      // Se n√£o encontrar empresaId no usu√°rio, buscar empresa onde √© admin
      if (!empresaId) {
        console.log('EmpresaId n√£o encontrado no usu√°rio, buscando empresas...');
        const empresasSnap = await getDocs(collection(db, 'empresas'));

        for (const empresaDoc of empresasSnap.docs) {
          const empresaData = empresaDoc.data();
          if (empresaData.adminId === user.uid || empresaData.email === user.email) {
            empresaId = empresaDoc.id;
            console.log('Empresa encontrada:', empresaId);
            break;
          }
        }
      }

      if (!empresaId) {
        alert('Empresa n√£o encontrada. Verifique suas permiss√µes.');
        return;
      }

      // Criar objeto do ve√≠culo com dados padr√£o
      const vehicleData = {
        marca: newVehicleData.marca,
        modelo: newVehicleData.modelo,
        placa: newVehicleData.placa.toUpperCase(),
        ano: parseInt(newVehicleData.ano) || new Date().getFullYear(),
        cor: newVehicleData.cor,
        renavam: '',
        adminId: user.uid,
        empresaId: empresaId,
        ativo: true,
        status: 'ativo' as const,
        condutor: '',
        pais: 'Brasil',
        cidade: 'S√£o Paulo',
        multas: 0,
        valorMultas: 0,
        vencimentoIPVA: '',
        vencimentoLicenciamento: '',
        kmRodados: 0,
        consumoMedio: 0,
        ultimaManutencao: '',
        proximaManutencao: '',
        seguro: {
          vencimento: '',
          valor: 0,
          seguradora: ''
        },
        gps: {
          latitude: -23.5505,
          longitude: -46.6333,
          ultimaAtualizacao: new Date().toISOString()
        },
        combustivel: {
          nivel: 100,
          tipo: 'Gasolina',
          custoMes: 0
        },
        dataCriacao: serverTimestamp(),
        dataAtualizacao: serverTimestamp()
      };

      console.log('Adicionando ve√≠culo:', vehicleData);
      const docRef = await addDoc(collection(db, 'empresas', empresaId, 'veiculos'), vehicleData);
      console.log('Ve√≠culo adicionado com ID:', docRef.id);

      showSnackbar('Ve√≠culo adicionado com sucesso!', 'success');
      setNewVehicleData({ marca: '', modelo: '', placa: '', ano: '', cor: '' });
      setShowAddVehicleModal(false);
      
      // Recarregar lista de ve√≠culos
      await loadVeiculos();

    } catch (error) {
      console.error('Erro ao adicionar ve√≠culo:', error);
      alert('Erro ao adicionar ve√≠culo: ' + error.message);
    } finally {
      setIsAddingVehicle(false);
    }
  }

  const showSnackbar = (message: string, type: 'success' | 'error') => {
    setSnackbar({ open: true, message, type });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ativo': return '#00ff7f';
      case 'manutencao': return '#ffd700';
      case 'inativo': return '#ff6b6b';
      case 'em_viagem': return '#1e90ff';
      default: return '#666';
    }
  };

  // Verificar autentica√ß√£o e obter dados do usu√°rio
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (!currentUser) {
        router.push('/frota/auth');
        return;
      }

      setUser(currentUser);

      // Verificar papel do usu√°rio primeiro
      try {
        const userDoc = await getDoc(doc(db, 'users', currentUser.uid));
        if (userDoc.exists()) {
          const userData = userDoc.data();
          const userRole = userData.role?.toLowerCase();

          // Se for colaborador, redirecionar para √°rea espec√≠fica
          if (userRole === 'colaborador') {
            router.push('/frota/colaborador');
            return;
          }
        }
      } catch (error) {
        console.error('Erro ao verificar papel do usu√°rio:', error);
      }

      // Carregar dados do usu√°rio e empresa para admins/gestores
      await checkUserPermissions(currentUser.email!);
      // loadUserData(currentUser); // This was replaced by checkUserPermissions
      // setLoading(false); // This is now handled in the second useEffect
    });

    return () => unsubscribe();
  }, [router]); // Added router to dependency array

  useEffect(() => {
    if (hasAccess && user) {
      loadVeiculos();
    } else if (!hasAccess && user && !loading) {
      // If user is logged in but doesn't have access, and we are done loading permissions
      // This part might not be strictly necessary if the access denied component handles it,
      // but good for clarity if the logic changes.
    } else if (!user && !loading) {
       // If no user and loading is done (meaning redirect happened or initial state)
       // No action needed here as the first useEffect handles redirection.
    }
    // Set loading to false only after permissions are checked and vehicles are loaded (or attempted)
    if (hasAccess || (!hasAccess && user)) { // If we have access OR if we have a user but no access
      setLoading(false);
    }
  }, [hasAccess, user, loading]); // Added loading to dependency array to ensure state updates correctly


  if (!hasAccess && !loading) {
    return (
      <div className="container">
        <style jsx>{`
          .access-denied {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: var(--color-background);
          }
          .access-card {
            text-align: center;
            background: var(--color-surface);
            padding: 3rem;
            border-radius: var(--radius-lg);
            border: 1px solid var(--color-border);
            max-width: 500px;
          }
        `}</style>

        <div className="access-denied">
          <div className="access-card">
            <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>üö´</div>
            <h1>Acesso Restrito</h1>
            <p style={{ marginBottom: '2rem' }}>
              Voc√™ n√£o tem permiss√£o para acessar o sistema de frota.
            </p>
            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>
              <Link href="/frota/auth" className="button button-primary">
                Fazer Login
              </Link>
              <Link href="/sistemas" className="button button-outline">
                Voltar aos Sistemas
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="container">
        <style jsx>{`
          .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: var(--color-background);
          }
        `}</style>

        <div className="loading">
          <div style={{ textAlign: 'center' }}>
            <div className="spinner" style={{
              width: '60px',
              height: '60px',
              border: '4px solid var(--color-border)',
              borderTop: '4px solid var(--color-primary)',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
              margin: '0 auto 1rem'
            }}></div>
            <p>Carregando Sistema Neural de Frota...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .frota-root {
          background: linear-gradient(135deg, var(--gradient-primary));
          min-height: 100vh;
          position: relative;
          color: var(--color-text);
        }

        .quantum-background {
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: radial-gradient(circle at 25% 25%, rgba(0, 255, 127, 0.15) 0%, transparent 50%),
                      radial-gradient(circle at 75% 75%, rgba(255, 215, 0, 0.15) 0%, transparent 50%),
                      radial-gradient(circle at 50% 50%, rgba(138, 43, 226, 0.1) 0%, transparent 50%);
          animation: quantumFlow 30s ease-in-out infinite;
          z-index: 0;
        }

        @keyframes quantumFlow {
          0%, 100% { opacity: 0.3, transform: scale(1); }
          33% { opacity: 0.6, transform: scale(1.1); }
          66% { opacity: 0.4, transform: scale(0.9); }
        }

        .neural-card {
          background: var(--gradient-card);
          border-radius: var(--radius-lg);
          padding: var(--gap-xl);
          backdrop-filter: blur(15px);
          border: 1px solid rgba(0, 255, 127, 0.3);
          transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          height: 200px;
          display: flex;
          flex-direction: column;
          justify-content: space-between;
        }

        .neural-card:hover {
          transform: translateY(-8px) scale(1.02);
          box-shadow: 0 16px 64px rgba(0, 255, 127, 0.4);
        }

        .stats-value {
          font-size: '2.5rem';
          font-weight: bold;
          background: linear-gradient(45deg, #00ff7f, #ffd700);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .vehicle-table {
          background: var(--color-surface);
          border-radius: var(--radius-lg);
          overflow: hidden;
          border: 1px solid var(--color-border);
        }

        .table-header {
          background: linear-gradient(135deg, rgba(0, 255, 127, 0.2) 0%, rgba(138, 43, 226, 0.2) 100%);
          padding: var(--gap-md);
          border-bottom: 2px solid rgba(0, 255, 127, 0.3);
        }

        .table-row {
          padding: var(--gap-md);
          border-bottom: 1px solid var(--color-border);
          transition: background 0.3s ease;
        }

        .table-row:hover {
          background: rgba(0, 255, 127, 0.1);
        }

        .status-chip {
          padding: 0.25rem 0.75rem;
          border-radius: 1rem;
          font-size: 0.8rem;
          font-weight: 600;
          color: #000;
        }

        .ai-button {
          background: linear-gradient(45deg, #ffd700, #ff6b35);
          color: #000;
          border: none;
          border-radius: 25px;
          padding: 1rem 2rem;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .ai-button:hover {
          background: linear-gradient(45deg, #ffed4a, #ff8c42);
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);
        }

        .action-button {
          background: linear-gradient(45deg, #00ff7f, #8a2be2);
          color: #fff;
          border: none;
          border-radius: 25px;
          padding: 1rem 2rem;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .action-button:hover {
          background: linear-gradient(45deg, #32cd32, #9932cc);
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(0, 255, 127, 0.4);
        }
      `}</style>

      <div className="frota-root">
        <div className="quantum-background" />

        <div style={{ position: 'relative', zIndex: 1, padding: 'var(--gap-xl)' }}>
          {/* Header */}
          <div className="responsive-flex" style={{
            marginBottom: 'var(--gap-xl)',
            padding: 'var(--gap-md)',
            background: 'var(--gradient-surface)',
            borderRadius: 'var(--radius)',
            border: '1px solid var(--color-border)'
          }}>
            <div className="row" style={{ gap: 'var(--gap-md)' }}>
              <Link href="/sistemas" className="button button-ghost">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                  <path d="M19 12H5M12 19l-7-7 7-7" stroke="currentColor" strokeWidth="2"/>
                </svg>
                Voltar aos Sistemas
              </Link>
              <div className="badge">
                üöó Sistema Neural de Frota v1.0
              </div>
            </div>
            <div style={{ display: 'flex', gap: 'var(--gap-md)', alignItems: 'center' }}>
              <div style={{ 
                padding: '0.5rem 1rem',
                background: 'rgba(255,255,255,0.1)',
                borderRadius: 'var(--radius)',
                fontSize: '0.9rem',
                color: 'var(--color-textSecondary)'
              }}>
                üë§ {user?.email}
              </div>
              <button
                onClick={async () => {
                  try {
                    await auth.signOut();
                    showSnackbar('Logout realizado com sucesso!', 'success');
                    window.location.href = '/frota/auth';
                  } catch (error) {
                    console.error('Erro ao fazer logout:', error);
                    showSnackbar('Erro ao fazer logout', 'error');
                  }
                }}
                className="button button-outline"
                style={{
                  background: 'linear-gradient(45deg, #ff6b6b, #ee5a5a)',
                  color: 'white',
                  border: 'none'
                }}
              >
                üö™ Sair
              </button>
              <ThemeSelector size="medium" />
            </div>
          </div>

          {/* Hero */}
          <div className="card" style={{
            textAlign: 'center',
            marginBottom: 'var(--gap-xl)',
            background: 'linear-gradient(135deg, #00ff7f 0%, #8a2be2 100%)',
            color: 'white',
            padding: '3rem'
          }}>
            <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>üöó</div>
            <h1 style={{ fontSize: '2.5rem', fontWeight: '800', marginBottom: '1rem' }}>
              Sistema Neural de Gerenciamento de Frota
            </h1>
            <p style={{ fontSize: '1.2rem', opacity: 0.9 }}>
              IA Qu√¢ntica ‚Ä¢ Multinacional ‚Ä¢ Preditiva ‚Ä¢ Tempo Real
            </p>

            <div style={{ marginTop: '2rem', display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap' }}>
              <button className="ai-button" onClick={generateAIAnalysis} disabled={loading}>
                üß† An√°lise IA
              </button>
              {(userPermissions?.role === 'superadmin' || userPermissions?.role === 'admin') && (
                <div style={{ display: 'flex', gap: 'var(--gap-sm)', marginBottom: 'var(--gap-md)', flexWrap: 'wrap' }}>
                  <button 
                    className="button button-primary"
                    onClick={() => setShowAddVehicleModal(true)}
                  >
                    + Adicionar Ve√≠culo
                  </button>
                  <button 
                    className="button button-primary"
                    onClick={() => setShowAddColaboradorModal(true)}
                  >
                    + Adicionar Colaborador
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Stats Cards */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
            gap: 'var(--gap-xl)',
            marginBottom: 'var(--gap-xl)'
          }}>
            <div className="neural-card">
              <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--gap-md)' }}>
                <div style={{ fontSize: '2rem' }}>üöó</div>
                <div>
                  <h3>Ve√≠culos Ativos</h3>
                  <div className="stats-value">{stats.veiculosAtivos}/{stats.totalVeiculos}</div>
                </div>
              </div>
            </div>

            <div className="neural-card">
              <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--gap-md)' }}>
                <div style={{ fontSize: '2rem' }}>‚ö†Ô∏è</div>
                <div>
                  <h3>Multas Pendentes</h3>
                  <div className="stats-value">{stats.multasPendentes}</div>
                </div>
              </div>
            </div>

            <div className="neural-card">
              <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--gap-md)' }}>
                <div style={{ fontSize: '2rem' }}>üë®‚Äçüíº</div>
                <div>
                  <h3>Motoristas</h3>
                  <div className="stats-value">{stats.motoristasCadastrados}</div>
                </div>
              </div>
            </div>

            <div className="neural-card">
              <div style={{ display: 'flex', alignItems: 'center', gap: 'var(--gap-md)' }}>
                <div style={{ fontSize: '2rem' }}>üí∞</div>
                <div>
                  <h3>D√©bitos Totais</h3>
                  <div className="stats-value">R$ {stats.totalDebitos.toLocaleString()}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Filtros */}
          <div className="card" style={{ padding: 'var(--gap-md)', marginBottom: 'var(--gap-xl)' }}>
            <div style={{ display: 'flex', gap: 'var(--gap-md)', flexWrap: 'wrap', alignItems: 'center' }}>
              <input
                className="input"
                placeholder="üîç Buscar ve√≠culo..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{ minWidth: '250px' }}
              />

              <select 
                className="input"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                style={{ minWidth: '150px' }}
              >
                <option value="todos">Todos os Status</option>
                <option value="ativo">Ativos</option>
                <option value="manutencao">Manuten√ß√£o</option>
                <option value="inativo">Inativos</option>
                <option value="em_viagem">Em Viagem</option>
              </select>

              <button
                className="button button-outline"
                onClick={loadVeiculos}
                disabled={loading}
              >
                üîÑ {loading ? 'Carregando...' : 'Atualizar'}
              </button>
            </div>
          </div>

          {/* Tabela de Ve√≠culos */}
          <div className="vehicle-table">
            <div className="table-header">
              <div style={{ display: 'grid', gridTemplateColumns: '2fr 1.5fr 1fr 1.5fr 1fr 1fr 1.5fr 1fr', gap: 'var(--gap-md)', fontWeight: 'bold' }}>
                <div>Ve√≠culo</div>
                <div>Condutor</div>
                <div>Status</div>
                <div>Localiza√ß√£o</div>
                <div>Multas</div>
                <div>Combust√≠vel</div>
                <div>Pr√≥xima Manuten√ß√£o</div>
                <div>A√ß√µes</div>
              </div>
            </div>

            <div style={{ maxHeight: '600px', overflow: 'auto' }}>
              {filteredVeiculos.map((veiculo, index) => (
                <div
                  key={veiculo.id}
                  className="table-row"
                >
                  <div style={{ display: 'grid', gridTemplateColumns: '2fr 1.5fr 1fr 1.5fr 1fr 1fr 1.5fr 1fr', gap: 'var(--gap-md)', alignItems: 'center' }}>
                    <div>
                      <div style={{ fontWeight: 'bold' }}>{veiculo.placa}</div>
                      <div style={{ fontSize: '0.8rem', opacity: 0.7 }}>
                        {veiculo.marca} {veiculo.modelo} ({veiculo.ano})
                      </div>
                    </div>
                    <div>{veiculo.condutor}</div>
                    <div>
                      <span 
                        className="status-chip"
                        style={{ backgroundColor: getStatusColor(veiculo.status) }}
                      >
                        {veiculo.status}
                      </span>
                    </div>
                    <div style={{ fontSize: '0.8rem' }}>
                      üìç {veiculo.cidade}, {veiculo.pais}
                    </div>
                    <div>
                      {veiculo.multas > 0 ? (
                        <span style={{ color: '#ff6b6b' }}>
                          ‚ö†Ô∏è {veiculo.multas} (R$ {veiculo.valorMultas.toFixed(2)})
                        </span>
                      ) : (
                        <span style={{ color: '#00ff7f' }}>‚úÖ OK</span>
                      )}
                    </div>
                    <div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                        ‚õΩ {veiculo.combustivel?.nivel || 0}%
                      </div>
                    </div>
                    <div style={{ fontSize: '0.8rem' }}>
                      {veiculo.proximaManutencao}
                    </div>
                    <div>
                      <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>
                        <button
                          className="button button-ghost"
                          style={{ padding: '0.25rem 0.5rem', fontSize: '0.8rem' }}
                          onClick={() => {
                            setSelectedVehicle(veiculo);
                            setEditMode(false);
                            setDetailsModalOpen(true);
                          }}
                          title="Ver detalhes"
                        >
                          üëÅÔ∏è
                        </button>
                        {(userPermissions?.role === 'superadmin' || userPermissions?.role === 'admin') && (
                          <>
                            <button
                              className="button button-outline"
                              style={{ padding: '0.25rem 0.5rem', fontSize: '0.8rem' }}
                              onClick={() => {
                                setSelectedVehicle(veiculo);
                                setEditMode(true);
                                setDetailsModalOpen(true);
                              }}
                              title="Editar ve√≠culo"
                            >
                              ‚úèÔ∏è
                            </button>
                            <button
                              className="button button-primary"
                              style={{ 
                                padding: '0.25rem 0.5rem', 
                                fontSize: '0.8rem',
                                background: !veiculo.condutor ? 'linear-gradient(45deg, #00ff7f, #8a2be2)' : 'linear-gradient(45deg, #ffd700, #ff6b35)'
                              }}
                              onClick={async () => {
                                setVeiculoParaAtribuir(veiculo);
                                await loadColaboradoresDisponiveis();
                                setShowAtribuirModal(true);
                              }}
                              title={veiculo.condutor ? 'Trocar condutor' : 'Atribuir condutor'}
                            >
                              {veiculo.condutor ? 'üîÑ' : 'üë§+'}
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {filteredVeiculos.length === 0 && !loading && (
            <div style={{ textAlign: 'center', padding: '3rem', color: 'var(--color-textSecondary)' }}>
              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üöó</div>
              <p>Nenhum ve√≠culo encontrado.</p>
              <p>Ajuste os filtros ou adicione novos ve√≠culos √† frota.</p>
            </div>
          )}
        </div>
      </div>

      {/* Modal de Adicionar Colaborador */}
      {showAddColaboradorModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div className="card" style={{ width: '100%', maxWidth: 400, margin: 16 }}>
            <h2>Adicionar Colaborador</h2>
            <p style={{ fontSize: '0.9rem', opacity: 0.8, marginTop: 8 }}>
              O colaborador ser√° automaticamente vinculado √† sua empresa
            </p>

            <div style={{ marginTop: 16 }}>
              <label>Nome Completo *</label>
              <input
                className="input"
                type="text"
                value={newColaborador.nome}
                onChange={(e) => setNewColaborador({...newColaborador, nome: e.target.value})}
                placeholder="Nome do colaborador"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Email *</label>
              <input
                className="input"
                type="email"
                value={newColaborador.email}
                onChange={(e) => setNewColaborador({...newColaborador, email: e.target.value})}
                placeholder="email@exemplo.com"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Senha *</label>
              <input
                className="input"
                type="password"
                value={newColaborador.senha}
                onChange={(e) => setNewColaborador({...newColaborador, senha: e.target.value})}
                placeholder="M√≠nimo 6 caracteres"
              />
            </div>

            <div style={{ 
              background: 'rgba(0, 255, 127, 0.1)',
              border: '1px solid rgba(0, 255, 127, 0.3)',
              borderRadius: 8,
              padding: 12,
              marginTop: 16
            }}>
              <p style={{ fontSize: '0.85rem', margin: 0 }}>
                ‚úÖ O colaborador poder√° fazer login na √°rea /colaborador/dashboard com essas credenciais
              </p>
            </div>

            <div style={{ display: 'flex', gap: 8, marginTop: 24 }}>
              <button
                className="button button-ghost"
                onClick={() => {
                  setShowAddColaboradorModal(false);
                  setNewColaborador({ nome: '', email: '', senha: '' });
                }}
                disabled={isAddingColaborador}
              >
                Cancelar
              </button>
              <button
                className="button button-primary"
                onClick={handleAddColaborador}
                disabled={isAddingColaborador}
              >
                {isAddingColaborador ? 'Adicionando...' : 'Adicionar Colaborador'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Atribuir Colaborador */}
      {showAtribuirModal && veiculoParaAtribuir && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div className="card" style={{ width: '100%', maxWidth: 500, margin: 16 }}>
            <h2>üë§ Atribuir Colaborador ao Ve√≠culo</h2>
            
            <div style={{
              background: 'rgba(0, 255, 127, 0.1)',
              border: '1px solid rgba(0, 255, 127, 0.3)',
              borderRadius: '8px',
              padding: '1rem',
              marginBottom: '1rem'
            }}>
              <h4>üöó Ve√≠culo Selecionado</h4>
              <p style={{ margin: 0, fontSize: '1.1rem', fontWeight: 'bold' }}>
                {veiculoParaAtribuir.marca} {veiculoParaAtribuir.modelo} - {veiculoParaAtribuir.placa}
              </p>
              {veiculoParaAtribuir.condutor && (
                <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', opacity: 0.8 }}>
                  üìã Condutor atual: {veiculoParaAtribuir.condutor}
                </p>
              )}
            </div>

            <div style={{ marginBottom: '1rem' }}>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
                Selecionar Colaborador *
              </label>
              <select
                className="input"
                value={colaboradorSelecionado}
                onChange={(e) => setColaboradorSelecionado(e.target.value)}
                style={{ width: '100%' }}
              >
                <option value="">-- Selecione um colaborador --</option>
                {colaboradoresDisponiveis.map((colab) => (
                  <option key={colab.id} value={colab.id}>
                    {colab.displayName || colab.email} ({colab.email})
                  </option>
                ))}
              </select>
            </div>

            {colaboradoresDisponiveis.length === 0 && (
              <div style={{
                background: 'rgba(255, 107, 107, 0.1)',
                border: '1px solid rgba(255, 107, 107, 0.3)',
                borderRadius: '8px',
                padding: '1rem',
                marginBottom: '1rem',
                textAlign: 'center'
              }}>
                <p style={{ margin: 0, fontSize: '0.9rem' }}>
                  ‚ö†Ô∏è Nenhum colaborador encontrado. Adicione colaboradores primeiro.
                </p>
              </div>
            )}

            <div style={{
              background: 'rgba(138, 43, 226, 0.1)',
              border: '1px solid rgba(138, 43, 226, 0.3)',
              borderRadius: '8px',
              padding: '1rem',
              marginBottom: '1rem'
            }}>
              <h4>‚ÑπÔ∏è Informa√ß√µes importantes:</h4>
              <ul style={{ margin: 0, paddingLeft: '1.2rem', fontSize: '0.9rem' }}>
                <li>O colaborador ser√° notificado da atribui√ß√£o</li>
                <li>Ele ter√° acesso √† √°rea de motorista com este ve√≠culo</li>
                <li>Poder√° registrar abastecimentos e despesas</li>
                <li>O GPS ficar√° dispon√≠vel para rastreamento</li>
              </ul>
            </div>

            <div style={{ display: 'flex', gap: '1rem', marginTop: '1.5rem' }}>
              <button
                className="button button-ghost"
                onClick={() => {
                  setShowAtribuirModal(false);
                  setVeiculoParaAtribuir(null);
                  setColaboradorSelecionado('');
                }}
                disabled={isAtribuindo}
                style={{ flex: 1 }}
              >
                Cancelar
              </button>
              <button
                className="button button-primary"
                onClick={handleAtribuirColaborador}
                disabled={isAtribuindo || !colaboradorSelecionado}
                style={{ 
                  flex: 1,
                  background: colaboradorSelecionado 
                    ? 'linear-gradient(45deg, #00ff7f, #8a2be2)' 
                    : 'var(--color-border)'
                }}
              >
                {isAtribuindo ? 'Atribuindo...' : '‚úÖ Atribuir Ve√≠culo'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Adicionar Ve√≠culo */}
      {showAddVehicleModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div className="card" style={{ width: '100%', maxWidth: 400, margin: 16 }}>
            <h2>Adicionar Ve√≠culo</h2>

            <div style={{ marginTop: 16 }}>
              <label>Marca *</label>
              <input
                className="input"
                type="text"
                value={newVehicleData.marca || ''}
                onChange={(e) => setNewVehicleData({...newVehicleData, marca: e.target.value})}
                placeholder="Ex: Toyota"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Modelo *</label>
              <input
                className="input"
                type="text"
                value={newVehicleData.modelo || ''}
                onChange={(e) => setNewVehicleData({...newVehicleData, modelo: e.target.value})}
                placeholder="Ex: Corolla"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Placa *</label>
              <input
                className="input"
                type="text"
                value={newVehicleData.placa || ''}
                onChange={(e) => setNewVehicleData({...newVehicleData, placa: e.target.value})}
                placeholder="Ex: ABC-1234"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Ano</label>
              <input
                className="input"
                type="text"
                value={newVehicleData.ano || ''}
                onChange={(e) => setNewVehicleData({...newVehicleData, ano: e.target.value})}
                placeholder="Ex: 2020"
              />
            </div>

            <div style={{ marginTop: 16 }}>
              <label>Cor</label>
              <input
                className="input"
                type="text"
                value={newVehicleData.cor || ''}
                onChange={(e) => setNewVehicleData({...newVehicleData, cor: e.target.value})}
                placeholder="Ex: Branco"
              />
            </div>

            <div style={{ display: 'flex', gap: 8, marginTop: 24 }}>
              <button
                className="button button-ghost"
                onClick={() => {
                  setShowAddVehicleModal(false);
                  setNewVehicleData({ marca: '', modelo: '', placa: '', ano: '', cor: '' });
                }}
                disabled={isAddingVehicle}
              >
                Cancelar
              </button>
              <button
                className="button button-primary"
                onClick={handleAddVehicle}
                disabled={isAddingVehicle}
              >
                {isAddingVehicle ? 'Adicionando...' : 'Adicionar'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Detalhes/Edi√ß√£o do Ve√≠culo */}
      {detailsModalOpen && selectedVehicle && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 2000,
          padding: 'var(--gap-md)'
        }}>
          <div style={{
            background: 'var(--color-surface)',
            borderRadius: 'var(--radius-lg)',
            padding: 'var(--gap-xl)',
            maxWidth: '700px',
            width: '100%',
            maxHeight: '80vh',
            overflow: 'auto',
            border: '1px solid var(--color-border)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              marginBottom: 'var(--gap-lg)',
              borderBottom: '2px solid var(--color-border)',
              paddingBottom: 'var(--gap-md)'
            }}>
              <h2 style={{ margin: 0, display: 'flex', alignItems: 'center', gap: 'var(--gap-sm)' }}>
                {editMode ? '‚úèÔ∏è Editar Ve√≠culo' : 'üëÅÔ∏è Detalhes do Ve√≠culo'}
              </h2>
              <div style={{ display: 'flex', gap: 'var(--gap-sm)' }}>
                {!editMode && (userPermissions?.role === 'superadmin' || userPermissions?.role === 'admin') && (
                  <button
                    onClick={() => setEditMode(true)}
                    className="button button-outline"
                    style={{ padding: '0.5rem 1rem' }}
                  >
                    ‚úèÔ∏è Editar
                  </button>
                )}
                <button
                  onClick={() => {
                    setDetailsModalOpen(false);
                    setSelectedVehicle(null);
                    setEditMode(false);
                  }}
                  style={{
                    background: 'none',
                    border: 'none',
                    fontSize: '1.5rem',
                    cursor: 'pointer',
                    color: 'var(--color-textSecondary)'
                  }}
                >
                  √ó
                </button>
              </div>
            </div>

            <div style={{ display: 'grid', gap: 'var(--gap-md)' }}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 'var(--gap-md)' }}>
                <div>
                  <label>Placa</label>
                  <input
                    className="input"
                    value={selectedVehicle.placa || ''}
                    onChange={(e) => setSelectedVehicle({ ...selectedVehicle, placa: e.target.value })}
                    readOnly={!editMode}
                    style={{ backgroundColor: editMode ? 'var(--color-background)' : 'var(--color-surface)' }}
                  />
                </div>
                <div>
                  <label>Status</label>
                  {editMode ? (
                    <select
                      className="input"
                      value={selectedVehicle.status}
                      onChange={(e) => setSelectedVehicle({ ...selectedVehicle, status: e.target.value as any })}
                    >
                      <option value="ativo">Ativo</option>
                      <option value="manutencao">Manuten√ß√£o</option>
                      <option value="inativo">Inativo</option>
                      <option value="em_viagem">Em Viagem</option>
                    </select>
                  ) : (
                    <input
                      className="input"
                      value={selectedVehicle.status}
                      readOnly
                      style={{ backgroundColor: 'var(--color-surface)' }}
                    />
                  )}
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 'var(--gap-md)' }}>
                <div>
                  <label>Condutor</label>
                  <input
                    className="input"
                    value={selectedVehicle.condutor || ''}
                    onChange={(e) => setSelectedVehicle({ ...selectedVehicle, condutor: e.target.value })}
                    readOnly={!editMode}
                    style={{ backgroundColor: editMode ? 'var(--color-background)' : 'var(--color-surface)' }}
                  />
                </div>
                <div>
                  <label>Localiza√ß√£o</label>
                  <input
                    className="input"
                    value={`${selectedVehicle.cidade}, ${selectedVehicle.pais}`}
                    readOnly
                    style={{ backgroundColor: 'var(--color-surface)' }}
                  />
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 'var(--gap-md)' }}>
                <div>
                  <label>Multas</label>
                  <input
                    className="input"
                    type="number"
                    value={selectedVehicle.multas || 0}
                    onChange={(e) => setSelectedVehicle({ ...selectedVehicle, multas: parseInt(e.target.value) })}
                    readOnly={!editMode}
                    style={{ backgroundColor: editMode ? 'var(--color-background)' : 'var(--color-surface)' }}
                  />
                </div>
                <div>
                  <label>Valor Multas (R$)</label>
                  <input
                    className="input"
                    type="number"
                    step="0.01"
                    value={selectedVehicle.valorMultas || 0}
                    onChange={(e) => setSelectedVehicle({ ...selectedVehicle, valorMultas: parseFloat(e.target.value) })}
                    readOnly={!editMode}
                    style={{ backgroundColor: editMode ? 'var(--color-background)' : 'var(--color-surface)' }}
                  />
                </div>
                <div>
                  <label>Combust√≠vel (%)</label>
                  <input
                    className="input"
                    type="number"
                    value={selectedVehicle.combustivel?.nivel || 0}
                    onChange={(e) => setSelectedVehicle({ 
                      ...selectedVehicle, 
                      combustivel: { ...selectedVehicle.combustivel, nivel: parseInt(e.target.value) } 
                    })}
                    readOnly={!editMode}
                    style={{ backgroundColor: editMode ? 'var(--color-background)' : 'var(--color-surface)' }}
                  />
                </div>
              </div>

              {editMode && (
                <div style={{
                  display: 'flex',
                  gap: 'var(--gap-md)',
                  justifyContent: 'flex-end',
                  marginTop: 'var(--gap-lg)',
                  borderTop: '1px solid var(--color-border)',
                  paddingTop: 'var(--gap-md)'
                }}>
                  <button
                    className="button button-outline"
                    onClick={() => setEditMode(false)}
                  >
                    Cancelar
                  </button>
                  <button
                    className="button button-primary"
                    onClick={async () => {
                      try {
                        if (selectedVehicle.id) {
                          await updateDoc(doc(db, 'veiculos', selectedVehicle.id), {
                            ...selectedVehicle,
                            dataAtualizacao: new Date().toISOString()
                          });
                          showSnackbar('Ve√≠culo atualizado com sucesso!', 'success');
                          loadVeiculos();
                          setEditMode(false);
                        }
                      } catch (error) {
                        console.error('Erro ao atualizar ve√≠culo:', error);
                        showSnackbar('Erro ao atualizar ve√≠culo', 'error');
                      }
                    }}
                    style={{ background: 'linear-gradient(45deg, #00ff7f, #8a2be2)' }}
                  >
                    ‚úÖ Salvar Altera√ß√µes
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Modal de An√°lise IA */}
      {aiAnalysisModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 2000,
          padding: 'var(--gap-md)'
        }}>
          <div style={{
            background: 'var(--color-surface)',
            borderRadius: 'var(--radius-lg)',
            padding: 'var(--gap-xl)',
            maxWidth: '800px',
            width: '100%',
            maxHeight: '80vh',
            overflow: 'auto',
            border: '1px solid var(--color-border)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              marginBottom: 'var(--gap-lg)',
              borderBottom: '2px solid var(--color-border)',
              paddingBottom: 'var(--gap-md)'
            }}>
              <h2 style={{ margin: 0, display: 'flex', alignItems: 'center', gap: 'var(--gap-sm)' }}>
                üß† An√°lise Neural da Frota
              </h2>
              <button
                onClick={() => setAiAnalysisModal(false)}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '1.5rem',
                  cursor: 'pointer',
                  color: 'var(--color-textSecondary)'
                }}
              >
                √ó
              </button>
            </div>

            <div style={{ display: 'grid', gap: 'var(--gap-lg)' }}>
              {aiInsights.map((insight) => (
                <div
                  key={insight.id}
                  style={{
                    background: 'var(--gradient-card)',
                    borderRadius: 'var(--radius)',
                    padding: 'var(--gap-lg)',
                    border: `2px solid ${
                      insight.prioridade === 'alta' ? '#ff6b6b' : 
                      insight.prioridade === 'media' ? '#ffd700' : '#00ff7f'
                    }`
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: 'var(--gap-md)' }}>
                    <div style={{
                      background: insight.prioridade === 'alta' ? '#ff6b6b' : 
                                  insight.prioridade === 'media' ? '#ffd700' : '#00ff7f',
                      color: '#000',
                      padding: '0.5rem',
                      borderRadius: '50%',
                      fontWeight: 'bold',
                      minWidth: '3rem',
                      textAlign: 'center'
                    }}>
                      {insight.confianca}%
                    </div>
                    <div style={{ flex: 1 }}>
                      <h3 style={{ margin: '0 0 0.5rem 0', color: 'var(--color-text)' }}>
                        {insight.titulo}
                      </h3>
                      <p style={{ margin: '0 0 1rem 0', opacity: 0.9 }}>
                        {insight.descricao}
                      </p>
                      <div style={{ display: 'flex', gap: 'var(--gap-md)', flexWrap: 'wrap', alignItems: 'center' }}>
                        <span style={{
                          background: 'rgba(0, 255, 127, 0.2)',
                          padding: '0.25rem 0.75rem',
                          borderRadius: 'var(--radius)',
                          fontSize: '0.8rem',
                          fontWeight: 'bold'
                        }}>
                          üí∞ Economia: R$ {insight.economia_estimada}
                        </span>
                        <span style={{
                          background: 'rgba(255, 107, 107, 0.2)',
                          padding: '0.25rem 0.75rem',
                          borderRadius: 'var(--radius)',
                          fontSize: '0.8rem',
                          fontWeight: 'bold'
                        }}>
                          ‚ö†Ô∏è Risco: {insight.risk_score}/10
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <div style={{
              display: 'flex',
              justifyContent: 'center',
              marginTop: 'var(--gap-lg)',
              borderTop: '1px solid var(--color-border)',
              paddingTop: 'var(--gap-md)'
            }}>
              <button
                className="button button-primary"
                onClick={() => setAiAnalysisModal(false)}
                style={{ background: 'linear-gradient(45deg, #00ff7f, #8a2be2)' }}
              >
                ‚úÖ Entendi
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Snackbar */}
      {snackbar.open && (
        <div style={{
          position: 'fixed',
          bottom: '2rem',
          right: '2rem',
          background: snackbar.type === 'success' ? '#00ff7f' : '#ff6b6b',
          color: '#000',
          padding: '1rem 2rem',
          borderRadius: '0.5rem',
          fontWeight: 'bold',
          zIndex: 1000
        }}>
          {snackbar.message}
          <button
            onClick={() => setSnackbar({ ...snackbar, open: false })}
            style={{ marginLeft: '1rem', background: 'none', border: 'none', fontSize: '1.2rem', cursor: 'pointer' }}
          >
            √ó
          </button>
        </div>
      )}
    </div>
  );
}