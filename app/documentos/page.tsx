'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import ThemeSelector from '@/src/components/ThemeSelector';
import EmpresaManager from '@/src/components/EmpresaManager';

// Import din√¢mico do Firebase para evitar erros SSR
let auth: any, db: any;
let onAuthStateChanged: any, doc: any, getDoc: any, addDoc: any, collection: any, query: any, where: any, getDocs: any, orderBy: any, deleteDoc: any, updateDoc: any;

if (typeof window !== 'undefined') {
  Promise.all([
    import('@/src/lib/firebase'),
    import('firebase/auth'),
    import('firebase/firestore')
  ]).then(([firebase, authModule, firestoreModule]) => {
    auth = firebase.auth;
    db = firebase.db;
    onAuthStateChanged = authModule.onAuthStateChanged;
    doc = firestoreModule.doc;
    getDoc = firestoreModule.getDoc;
    addDoc = firestoreModule.addDoc;
    collection = firestoreModule.collection;
    query = firestoreModule.query;
    where = firestoreModule.where;
    getDocs = firestoreModule.getDocs;
    orderBy = firestoreModule.orderBy;
    deleteDoc = firestoreModule.deleteDoc;
    updateDoc = firestoreModule.updateDoc;
  }).catch(error => {
    console.error('Erro ao carregar Firebase:', error);
  });
}

interface DocumentTemplate {
  id: string;
  name: string;
  type: 'contract' | 'report' | 'certificate' | 'letter' | 'form' | 'custom';
  description: string;
  fields: DocumentField[];
  template: string;
  createdAt: number;
  updatedAt: number;
}

interface DocumentField {
  name: string;
  label: string;
  type: 'text' | 'number' | 'date' | 'select' | 'textarea';
  required: boolean;
  options?: string[];
  placeholder?: string;
}

interface GeneratedDocument {
  id: string;
  templateId: string;
  templateName: string;
  title: string;
  content: string;
  data: Record<string, any>;
  createdAt: number;
  createdBy: string;
  htmlContent?: string;
  aiGenerated?: boolean;
}

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
}

export default function DocumentosPage() {
  const [user, setUser] = useState<any>(null);
  const [userRole, setUserRole] = useState<string | null>(null); // State to store user role
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'generator' | 'chat' | 'ocr' | 'templates' | 'history' | 'empresas'>('generator');
  const [templates, setTemplates] = useState<DocumentTemplate[]>([]);
  const [documents, setDocuments] = useState<GeneratedDocument[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<DocumentTemplate | null>(null);
  const [formData, setFormData] = useState<Record<string, any>>({});
  const [generatedContent, setGeneratedContent] = useState<string>('');
  const [generatedHtml, setGeneratedHtml] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);

  // Chat IA
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [chatInput, setChatInput] = useState('');
  const [isAiTyping, setIsAiTyping] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  // OCR
  const [ocrImages, setOcrImages] = useState<File[]>([]);
  const [ocrLoading, setOcrLoading] = useState(false);
  const [extractedData, setExtractedData] = useState<Record<string, any>>({});

  useEffect(() => {
    let mounted = true;
    let unsubscribe: any;

    const initFirebase = async () => {
      try {
        // Aguardar o carregamento do Firebase
        if (typeof window === 'undefined') return;

        const [firebase, authModule, firestoreModule] = await Promise.all([
          import('@/src/lib/firebase'),
          import('firebase/auth'),
          import('firebase/firestore')
        ]);

        if (!mounted) return;

        const authInstance = firebase.auth;
        const dbInstance = firestoreModule; // Use firestoreModule directly for functions

        unsubscribe = authModule.onAuthStateChanged(authInstance, async (currentUser) => {
          if (!mounted) return;

          try {
            if (currentUser) {
              // Verificar se o usu√°rio tem acesso ao sistema de documentos
              const userDocRef = firestoreModule.doc(firebase.db, 'documentos_users', currentUser.uid);
              const userDoc = await firestoreModule.getDoc(userDocRef);

              if (userDoc.exists() && userDoc.data()?.isActive) {
                if (mounted) {
                  setUser(currentUser);
                  const userData = userDoc.data();
                  setUserRole(userData?.role || null);

                  // Carregar templates com fallback para templates locais
                  try {
                    const templatesQuery = firestoreModule.query(
                      firestoreModule.collection(firebase.db, 'document_templates'),
                      firestoreModule.orderBy('name', 'asc')
                    );
                    const templatesSnapshot = await firestoreModule.getDocs(templatesQuery);
                    const templatesData = templatesSnapshot.docs.map(doc => ({
                      id: doc.id,
                      ...doc.data()
                    }));

                    // Se n√£o h√° templates no Firestore, usar templates locais
                    if (templatesData.length === 0) {
                      setTemplates(getLocalTemplates());
                    } else {
                      setTemplates(templatesData as DocumentTemplate[]);
                    }
                  } catch (error) {
                    console.error('Erro ao carregar templates:', error);
                    // Usar templates locais como fallback
                    setTemplates(getLocalTemplates());
                  }

                  // Carregar documentos com tratamento de erro melhorado
                  try {
                    const documentsQuery = firestoreModule.query(
                      firestoreModule.collection(firebase.db, 'generated_documents'),
                      firestoreModule.where('createdBy', '==', currentUser.uid),
                      firestoreModule.orderBy('createdAt', 'desc')
                    );
                    const documentsSnapshot = await firestoreModule.getDocs(documentsQuery);
                    const documentsData = documentsSnapshot.docs.map((doc: any) => ({
                      id: doc.id,
                      ...doc.data()
                    }));
                    setDocuments(documentsData as GeneratedDocument[]);
                  } catch (error) {
                    console.error('Erro ao carregar documentos:', error);
                    setDocuments([]);
                  }

                  initializeChatWelcome();
                }
              } else {
                // Se n√£o tem acesso, redirecionar para autentica√ß√£o
                if (mounted) {
                  window.location.href = '/documentos/auth';
                }
                return;
              }
            } else {
              // Usu√°rio n√£o autenticado
              if (mounted) {
                window.location.href = '/documentos/auth';
              }
              return;
            }
          } catch (error) {
            console.error('Erro ao verificar acesso do usu√°rio:', error);
            if (mounted) {
              // Em caso de erro, redirecionar para autentica√ß√£o
              window.location.href = '/documentos/auth';
            }
            return;
          }

          if (mounted) {
            setLoading(false);
          }
        });

      } catch (error) {
        console.error('Erro ao inicializar Firebase:', error);
        if (mounted) {
          setLoading(false);
          window.location.href = '/documentos/auth';
        }
      }
    };

    initFirebase();

    return () => {
      mounted = false;
      if (unsubscribe) unsubscribe();
    };
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages]);

  const initializeChatWelcome = () => {
    setChatMessages([{
      id: '1',
      role: 'assistant',
      content: `üëã Ol√°! Sou seu assistente inteligente para gera√ß√£o de documentos.

Posso ajudar voc√™ a:
‚Ä¢ üìù Criar qualquer tipo de documento
‚Ä¢ üéØ Gerar contratos, relat√≥rios, declara√ß√µes
‚Ä¢ üìä Preencher formul√°rios automaticamente
‚Ä¢ üîç Extrair dados de imagens (OCR)
‚Ä¢ ‚ú® Personalizar templates existentes

**Como usar:**
- Digite o tipo de documento que precisa
- Descreva os detalhes necess√°rios
- Eu gero o documento completo para voc√™!

**Exemplos:**
"Crie um contrato de presta√ß√£o de servi√ßos"
"Preciso de uma declara√ß√£o de renda"
"Gere um relat√≥rio mensal de vendas"

O que posso criar para voc√™ hoje?`,
      timestamp: Date.now()
    }]);
  };

  // Templates locais como fallback - Estrutura Universal Completa
  const getLocalTemplates = (): DocumentTemplate[] => {
    return [
      // ===== JUR√çDICO =====
      {
        id: 'procuracao-simples',
        name: 'Procura√ß√£o Simples',
        type: 'custom',
        description: 'Documento para outorgar poderes a terceiros',
        fields: [
          { name: 'outorgante_cpf', label: 'CPF/CNPJ do Outorgante', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'outorgante_nome', label: 'Nome do Outorgante', type: 'text', required: true, placeholder: 'Jo√£o Silva Santos' },
          { name: 'outorgante_nacionalidade', label: 'Nacionalidade', type: 'text', required: true, placeholder: 'brasileiro' },
          { name: 'outorgante_estado_civil', label: 'Estado Civil', type: 'select', required: true, options: ['solteiro(a)', 'casado(a)', 'divorciado(a)', 'vi√∫vo(a)'] },
          { name: 'outorgante_profissao', label: 'Profiss√£o', type: 'text', required: true, placeholder: 'Engenheiro' },
          { name: 'outorgante_rg', label: 'RG', type: 'text', required: true, placeholder: '12.345.678-9' },
          { name: 'outorgante_endereco', label: 'Endere√ßo', type: 'text', required: true, placeholder: 'Rua das Flores, 123' },
          { name: 'procurador_cpf', label: 'CPF do Procurador', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'procurador_nome', label: 'Nome do Procurador', type: 'text', required: true, placeholder: 'Maria Santos Silva' },
          { name: 'procurador_nacionalidade', label: 'Nacionalidade do Procurador', type: 'text', required: true, placeholder: 'brasileira' },
          { name: 'procurador_estado_civil', label: 'Estado Civil do Procurador', type: 'select', required: true, options: ['solteiro(a)', 'casado(a)', 'divorciado(a)', 'vi√∫vo(a)'] },
          { name: 'procurador_profissao', label: 'Profiss√£o do Procurador', type: 'text', required: true, placeholder: 'Advogada' },
          { name: 'procurador_rg', label: 'RG do Procurador', type: 'text', required: true, placeholder: '98.765.432-1' },
          { name: 'procurador_endereco', label: 'Endere√ßo do Procurador', type: 'text', required: true, placeholder: 'Avenida Central, 456' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `PROCURA√á√ÉO

Eu, {{outorgante_nome}}, {{outorgante_nacionalidade}}, {{outorgante_estado_civil}}, {{outorgante_profissao}}, portador(a) do RG n¬∫ {{outorgante_rg}} e CPF n¬∫ {{outorgante_cpf}}, residente e domiciliado(a) √† {{outorgante_endereco}}, por este instrumento particular, nomeio e constituo como meu(minha) bastante procurador(a) o(a) Sr.(a) {{procurador_nome}}, {{procurador_nacionalidade}}, {{procurador_estado_civil}}, {{procurador_profissao}}, portador(a) do RG n¬∫ {{procurador_rg}} e CPF n¬∫ {{procurador_cpf}}, residente e domiciliado(a) √† {{procurador_endereco}}, para o fim espec√≠fico de:

- Representar-me perante reparti√ß√µes p√∫blicas, empresas e institui√ß√µes em geral;
- Assinar documentos em meu nome;
- Praticar todos os atos necess√°rios ao bom e fiel cumprimento do presente mandato.

A presente procura√ß√£o √© v√°lida por 90 (noventa) dias a contar desta data.

{{cidade}}, {{data_atual}}

_________________________________
{{outorgante_nome}}
Outorgante

RECONHECIMENTO DE FIRMA
________________________`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'procuracao-publica',
        name: 'Procura√ß√£o P√∫blica',
        type: 'custom',
        description: 'Procura√ß√£o com poderes amplos para cart√≥rio',
        fields: [
          { name: 'outorgante_cpf', label: 'CPF/CNPJ do Outorgante', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'outorgante_nome', label: 'Nome do Outorgante', type: 'text', required: true, placeholder: 'Jo√£o Silva Santos' },
          { name: 'outorgante_nacionalidade', label: 'Nacionalidade', type: 'text', required: true, placeholder: 'brasileiro' },
          { name: 'outorgante_estado_civil', label: 'Estado Civil', type: 'select', required: true, options: ['solteiro(a)', 'casado(a)', 'divorciado(a)', 'vi√∫vo(a)'] },
          { name: 'outorgante_profissao', label: 'Profiss√£o', type: 'text', required: true, placeholder: 'Engenheiro' },
          { name: 'outorgante_rg', label: 'RG', type: 'text', required: true, placeholder: '12.345.678-9' },
          { name: 'outorgante_endereco', label: 'Endere√ßo', type: 'text', required: true, placeholder: 'Rua das Flores, 123' },
          { name: 'procurador_cpf', label: 'CPF do Procurador', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'procurador_nome', label: 'Nome do Procurador', type: 'text', required: true, placeholder: 'Maria Santos Silva' },
          { name: 'procurador_endereco', label: 'Endere√ßo do Procurador', type: 'text', required: true, placeholder: 'Avenida Central, 456' },
          { name: 'poderes_especificos', label: 'Poderes Espec√≠ficos', type: 'textarea', required: true, placeholder: 'Descreva os poderes outorgados' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `PROCURA√á√ÉO P√öBLICA

Saibam quantos este p√∫blico instrumento de procura√ß√£o bastante virem que, no ano de {{data_atual}}, nesta cidade de {{cidade}}, perante mim, Tabeli√£o, compareceu {{outorgante_nome}}, {{outorgante_nacionalidade}}, {{outorgante_estado_civil}}, {{outorgante_profissao}}, portador(a) do RG n¬∫ {{outorgante_rg}} e CPF n¬∫ {{outorgante_cpf}}, residente e domiciliado(a) √† {{outorgante_endereco}}, como outorgante, que nomeia e constitui seu bastante procurador {{procurador_nome}}, residente √† {{procurador_endereco}}, portador do CPF n¬∫ {{procurador_cpf}}, para os seguintes fins:

{{poderes_especificos}}

Esta procura√ß√£o ter√° validade por 01 (um) ano a contar desta data, podendo ser revogada a qualquer tempo por declara√ß√£o expressa do outorgante.

Do que, para constar, lavrei a presente procura√ß√£o.

{{cidade}}, {{data_atual}}

_________________________________
Tabeli√£o`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'termo-confidencialidade',
        name: 'Termo de Confidencialidade (NDA)',
        type: 'custom',
        description: 'Acordo de confidencialidade para prote√ß√£o de informa√ß√µes',
        fields: [
          { name: 'parte1_cnpj_cpf', label: 'CNPJ/CPF da Parte 1', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'parte1_nome', label: 'Nome/Raz√£o Social da Parte 1', type: 'text', required: true, placeholder: 'Empresa ABC Ltda' },
          { name: 'parte1_endereco', label: 'Endere√ßo da Parte 1', type: 'text', required: true, placeholder: 'Rua Comercial, 100' },
          { name: 'parte2_cnpj_cpf', label: 'CNPJ/CPF da Parte 2', type: 'text', required: true, placeholder: '98.765.432/0001-10' },
          { name: 'parte2_nome', label: 'Nome/Raz√£o Social da Parte 2', type: 'text', required: true, placeholder: 'Tech Solutions S.A.' },
          { name: 'parte2_endereco', label: 'Endere√ßo da Parte 2', type: 'text', required: true, placeholder: 'Av. Tecnologia, 200' },
          { name: 'objeto_confidencialidade', label: 'Objeto da Confidencialidade', type: 'textarea', required: true, placeholder: 'Descreva as informa√ß√µes confidenciais' },
          { name: 'prazo_anos', label: 'Prazo de Vig√™ncia (anos)', type: 'number', required: true, placeholder: '5' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `TERMO DE CONFIDENCIALIDADE (NDA)

PARTES:
PARTE 1: {{parte1_nome}}, inscrita no CNPJ/CPF n¬∫ {{parte1_cnpj_cpf}}, com sede √† {{parte1_endereco}}
PARTE 2: {{parte2_nome}}, inscrita no CNPJ/CPF n¬∫ {{parte2_cnpj_cpf}}, com sede √† {{parte2_endereco}}

OBJETO: As partes acordam manter sigilo absoluto sobre: {{objeto_confidencialidade}}

OBRIGA√á√ïES:
1. N√£o divulgar informa√ß√µes confidenciais a terceiros
2. Utilizar informa√ß√µes apenas para fins acordados
3. Devolver ou destruir documentos confidenciais ao t√©rmino

PRAZO: {{prazo_anos}} anos a partir desta data

PENALIDADES: Multa de R$ 50.000,00 por quebra de confidencialidade

{{cidade}}, {{data_atual}}

_____________________          _____________________
    {{parte1_nome}}              {{parte2_nome}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== COMERCIAL =====
      {
        id: 'contrato-servicos',
        name: 'Contrato de Presta√ß√£o de Servi√ßos',
        type: 'contract',
        description: 'Contrato padr√£o para presta√ß√£o de servi√ßos',
        fields: [
          { name: 'contratante_cnpj_cpf', label: 'CNPJ/CPF do Contratante', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'contratante_nome', label: 'Nome/Raz√£o Social do Contratante', type: 'text', required: true, placeholder: 'Empresa ABC Ltda' },
          { name: 'contratante_endereco', label: 'Endere√ßo do Contratante', type: 'text', required: true, placeholder: 'Rua Comercial, 100' },
          { name: 'contratante_telefone', label: 'Telefone do Contratante', type: 'text', required: false, placeholder: '(11) 99999-9999' },
          { name: 'contratado_cnpj_cpf', label: 'CNPJ/CPF do Contratado', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'contratado_nome', label: 'Nome/Raz√£o Social do Contratado', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'contratado_endereco', label: 'Endere√ßo do Contratado', type: 'text', required: true, placeholder: 'Rua dos Prestadores, 50' },
          { name: 'contratado_telefone', label: 'Telefone do Contratado', type: 'text', required: false, placeholder: '(11) 88888-8888' },
          { name: 'objeto', label: 'Objeto do Contrato', type: 'textarea', required: true, placeholder: 'Presta√ß√£o de servi√ßos de...' },
          { name: 'prazo_meses', label: 'Prazo (meses)', type: 'number', required: true, placeholder: '12' },
          { name: 'data_inicio', label: 'Data de In√≠cio', type: 'date', required: true },
          { name: 'valor_total', label: 'Valor Total (R$)', type: 'text', required: true, placeholder: '10.000,00' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS

CONTRATANTE: {{contratante_nome}}, inscrito no CNPJ/CPF n¬∫ {{contratante_cnpj_cpf}}, com sede/resid√™ncia √† {{contratante_endereco}}

CONTRATADO: {{contratado_nome}}, inscrito no CNPJ/CPF n¬∫ {{contratado_cnpj_cpf}}, com sede/resid√™ncia √† {{contratado_endereco}}

OBJETO: O presente contrato tem por objeto {{objeto}}.

PRAZO: O prazo de vig√™ncia ser√° de {{prazo_meses}} meses, iniciando em {{data_inicio}}.

VALOR: O valor total dos servi√ßos ser√° de R$ {{valor_total}}, pago conforme cronograma anexo.

OBRIGA√á√ïES DO CONTRATADO:
- Executar os servi√ßos com qualidade e pontualidade;
- Manter sigilo sobre informa√ß√µes confidenciais;
- Entregar o trabalho no prazo estabelecido.

OBRIGA√á√ïES DO CONTRATANTE:
- Fornecer informa√ß√µes necess√°rias para execu√ß√£o;
- Efetuar pagamentos conforme acordado;
- Dar condi√ß√µes adequadas para trabalho.

{{cidade}}, {{data_atual}}

_____________________          _____________________
    CONTRATANTE                    CONTRATADO`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'contrato-compra-venda',
        name: 'Contrato de Compra e Venda',
        type: 'contract',
        description: 'Contrato para compra e venda de bens',
        fields: [
          { name: 'vendedor_cnpj_cpf', label: 'CNPJ/CPF do Vendedor', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'vendedor_nome', label: 'Nome do Vendedor', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'vendedor_endereco', label: 'Endere√ßo do Vendedor', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'comprador_cnpj_cpf', label: 'CNPJ/CPF do Comprador', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'comprador_nome', label: 'Nome do Comprador', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'comprador_endereco', label: 'Endere√ßo do Comprador', type: 'text', required: true, placeholder: 'Rua B, 456' },
          { name: 'bem_descricao', label: 'Descri√ß√£o do Bem', type: 'textarea', required: true, placeholder: 'Ve√≠culo marca X, modelo Y...' },
          { name: 'valor_venda', label: 'Valor da Venda (R$)', type: 'text', required: true, placeholder: '50.000,00' },
          { name: 'forma_pagamento', label: 'Forma de Pagamento', type: 'textarea', required: true, placeholder: '√Ä vista, parcelado...' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE COMPRA E VENDA

VENDEDOR: {{vendedor_nome}}, inscrito no CPF/CNPJ n¬∫ {{vendedor_cnpj_cpf}}, residente √† {{vendedor_endereco}}

COMPRADOR: {{comprador_nome}}, inscrito no CPF/CNPJ n¬∫ {{comprador_cnpj_cpf}}, residente √† {{comprador_endereco}}

OBJETO: O vendedor vende ao comprador o seguinte bem: {{bem_descricao}}

PRE√áO: O valor total da venda √© de R$ {{valor_venda}}.

PAGAMENTO: {{forma_pagamento}}

ENTREGA: O bem ser√° entregue no ato da assinatura deste contrato.

GARANTIAS: O vendedor garante a propriedade do bem e aus√™ncia de √¥nus.

{{cidade}}, {{data_atual}}

_____________________          _____________________
     VENDEDOR                    COMPRADOR`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'contrato-locacao',
        name: 'Contrato de Loca√ß√£o',
        type: 'contract',
        description: 'Contrato de loca√ß√£o residencial ou comercial',
        fields: [
          { name: 'locador_cnpj_cpf', label: 'CNPJ/CPF do Locador', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'locador_nome', label: 'Nome do Locador', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'locador_endereco', label: 'Endere√ßo do Locador', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'locatario_cnpj_cpf', label: 'CNPJ/CPF do Locat√°rio', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'locatario_nome', label: 'Nome do Locat√°rio', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'locatario_endereco', label: 'Endere√ßo do Locat√°rio', type: 'text', required: true, placeholder: 'Rua B, 456' },
          { name: 'imovel_endereco', label: 'Endere√ßo do Im√≥vel', type: 'text', required: true, placeholder: 'Rua dos Inquilinos, 789' },
          { name: 'imovel_tipo', label: 'Tipo do Im√≥vel', type: 'select', required: true, options: ['Residencial', 'Comercial', 'Sala', 'Apartamento', 'Casa'] },
          { name: 'valor_aluguel', label: 'Valor do Aluguel (R$)', type: 'text', required: true, placeholder: '2.500,00' },
          { name: 'prazo_meses', label: 'Prazo (meses)', type: 'number', required: true, placeholder: '30' },
          { name: 'data_inicio', label: 'Data de In√≠cio', type: 'date', required: true },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE LOCA√á√ÉO

LOCADOR: {{locador_nome}}, inscrito no CPF/CNPJ {{locador_cnpj_cpf}}, residente √† {{locador_endereco}}

LOCAT√ÅRIO: {{locatario_nome}}, inscrito no CPF/CNPJ {{locatario_cnpj_cpf}}, residente √† {{locatario_endereco}}

IM√ìVEL: {{imovel_tipo}} localizado √† {{imovel_endereco}}

PRAZO: {{prazo_meses}} meses, iniciando em {{data_inicio}}

VALOR: R$ {{valor_aluguel}} mensais, vencimento dia 10

OBRIGA√á√ïES:
- Locat√°rio: pagar pontualmente, conservar o im√≥vel
- Locador: garantir uso pac√≠fico do im√≥vel

{{cidade}}, {{data_atual}}

_____________________          _____________________
     LOCADOR                    LOCAT√ÅRIO`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== RECURSOS HUMANOS =====
      {
        id: 'contrato-trabalho-clt',
        name: 'Contrato de Trabalho CLT',
        type: 'contract',
        description: 'Contrato de trabalho pela CLT',
        fields: [
          { name: 'empregador_cnpj', label: 'CNPJ do Empregador', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empregador_nome', label: 'Raz√£o Social', type: 'text', required: true, placeholder: 'Empresa ABC Ltda' },
          { name: 'empregador_endereco', label: 'Endere√ßo da Empresa', type: 'text', required: true, placeholder: 'Rua Comercial, 100' },
          { name: 'empregado_cpf', label: 'CPF do Empregado', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'empregado_nome', label: 'Nome do Empregado', type: 'text', required: true, placeholder: 'Jo√£o Silva Santos' },
          { name: 'empregado_endereco', label: 'Endere√ßo do Empregado', type: 'text', required: true, placeholder: 'Rua das Flores, 123' },
          { name: 'empregado_rg', label: 'RG do Empregado', type: 'text', required: true, placeholder: '12.345.678-9' },
          { name: 'cargo', label: 'Cargo', type: 'text', required: true, placeholder: 'Analista de Sistemas' },
          { name: 'salario', label: 'Sal√°rio (R$)', type: 'text', required: true, placeholder: '5.000,00' },
          { name: 'jornada', label: 'Jornada de Trabalho', type: 'text', required: true, placeholder: '44 horas semanais' },
          { name: 'data_inicio', label: 'Data de In√≠cio', type: 'date', required: true },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE TRABALHO

EMPREGADOR: {{empregador_nome}}, CNPJ {{empregador_cnpj}}, com sede √† {{empregador_endereco}}

EMPREGADO: {{empregado_nome}}, CPF {{empregado_cpf}}, RG {{empregado_rg}}, residente √† {{empregado_endereco}}

CARGO: {{cargo}}

SAL√ÅRIO: R$ {{salario}} mensais

JORNADA: {{jornada}}

IN√çCIO: {{data_inicio}}

OBRIGA√á√ïES: Cumprimento da CLT e regulamentos internos

{{cidade}}, {{data_atual}}

_____________________          _____________________
    EMPREGADOR                  EMPREGADO`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'contrato-estagio',
        name: 'Contrato de Est√°gio',
        type: 'contract',
        description: 'Contrato de est√°gio curricular',
        fields: [
          { name: 'empresa_cnpj', label: 'CNPJ da Empresa', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empresa_nome', label: 'Raz√£o Social', type: 'text', required: true, placeholder: 'Empresa ABC Ltda' },
          { name: 'empresa_endereco', label: 'Endere√ßo da Empresa', type: 'text', required: true, placeholder: 'Rua Comercial, 100' },
          { name: 'estagiario_cpf', label: 'CPF do Estagi√°rio', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'estagiario_nome', label: 'Nome do Estagi√°rio', type: 'text', required: true, placeholder: 'Ana Silva' },
          { name: 'estagiario_endereco', label: 'Endere√ßo do Estagi√°rio', type: 'text', required: true, placeholder: 'Rua Estudante, 789' },
          { name: 'instituicao_ensino', label: 'Institui√ß√£o de Ensino', type: 'text', required: true, placeholder: 'Universidade XYZ' },
          { name: 'curso', label: 'Curso', type: 'text', required: true, placeholder: 'Administra√ß√£o' },
          { name: 'valor_bolsa', label: 'Valor da Bolsa (R$)', type: 'text', required: true, placeholder: '800,00' },
          { name: 'carga_horaria', label: 'Carga Hor√°ria Semanal', type: 'text', required: true, placeholder: '30 horas' },
          { name: 'data_inicio', label: 'Data de In√≠cio', type: 'date', required: true },
          { name: 'data_fim', label: 'Data de T√©rmino', type: 'date', required: true },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE EST√ÅGIO

CONCEDENTE: {{empresa_nome}}, CNPJ {{empresa_cnpj}}, com sede √† {{empresa_endereco}}

ESTAGI√ÅRIO: {{estagiario_nome}}, CPF {{estagiario_cpf}}, estudante de {{curso}} na {{instituicao_ensino}}, residente √† {{estagiario_endereco}}

PER√çODO: {{data_inicio}} a {{data_fim}}

CARGA HOR√ÅRIA: {{carga_horaria}}

BOLSA-AUX√çLIO: R$ {{valor_bolsa}} mensais

ATIVIDADES: Relacionadas ao curso de {{curso}}

{{cidade}}, {{data_atual}}

_____________________          _____________________
    CONCEDENTE                  ESTAGI√ÅRIO`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== VEICULAR =====
      {
        id: 'contrato-compra-venda-veiculo',
        name: 'Contrato de Compra e Venda de Ve√≠culo',
        type: 'contract',
        description: 'Contrato espec√≠fico para venda de ve√≠culos',
        fields: [
          { name: 'vendedor_cpf', label: 'CPF do Vendedor', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'vendedor_nome', label: 'Nome do Vendedor', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'vendedor_endereco', label: 'Endere√ßo do Vendedor', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'comprador_cpf', label: 'CPF do Comprador', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'comprador_nome', label: 'Nome do Comprador', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'comprador_endereco', label: 'Endere√ßo do Comprador', type: 'text', required: true, placeholder: 'Rua B, 456' },
          { name: 'veiculo_marca', label: 'Marca do Ve√≠culo', type: 'text', required: true, placeholder: 'Honda' },
          { name: 'veiculo_modelo', label: 'Modelo', type: 'text', required: true, placeholder: 'Civic' },
          { name: 'veiculo_ano', label: 'Ano', type: 'text', required: true, placeholder: '2020' },
          { name: 'veiculo_placa', label: 'Placa', type: 'text', required: true, placeholder: 'ABC-1234' },
          { name: 'veiculo_chassi', label: 'Chassi', type: 'text', required: true, placeholder: '9BWHE21JX24060831' },
          { name: 'valor_venda', label: 'Valor da Venda (R$)', type: 'text', required: true, placeholder: '45.000,00' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE COMPRA E VENDA DE VE√çCULO

VENDEDOR: {{vendedor_nome}}, CPF {{vendedor_cpf}}, residente √† {{vendedor_endereco}}

COMPRADOR: {{comprador_nome}}, CPF {{comprador_cpf}}, residente √† {{comprador_endereco}}

VE√çCULO:
- Marca: {{veiculo_marca}}
- Modelo: {{veiculo_modelo}}
- Ano: {{veiculo_ano}}
- Placa: {{veiculo_placa}}
- Chassi: {{veiculo_chassi}}

VALOR: R$ {{valor_venda}}

CONDI√á√ïES: Ve√≠culo vendido no estado em que se encontra

{{cidade}}, {{data_atual}}

_____________________          _____________________
     VENDEDOR                    COMPRADOR`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== FISCAL/CONT√ÅBIL =====
      {
        id: 'declaracao-renda',
        name: 'Declara√ß√£o de Renda',
        type: 'certificate',
        description: 'Declara√ß√£o de renda para fins diversos',
        fields: [
          { name: 'cpf', label: 'CPF', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'nome_completo', label: 'Nome Completo', type: 'text', required: true, placeholder: 'Jo√£o Silva Santos' },
          { name: 'rg', label: 'RG', type: 'text', required: true, placeholder: '12.345.678-9' },
          { name: 'endereco', label: 'Endere√ßo Completo', type: 'text', required: true, placeholder: 'Rua das Flores, 123' },
          { name: 'empresa', label: 'Empresa/Empregador', type: 'text', required: true, placeholder: 'Tech Solutions Ltda' },
          { name: 'cargo', label: 'Cargo/Fun√ß√£o', type: 'text', required: true, placeholder: 'Desenvolvedor' },
          { name: 'renda_mensal', label: 'Renda Mensal (R$)', type: 'text', required: true, placeholder: '5.000,00' },
          { name: 'finalidade', label: 'Finalidade da Declara√ß√£o', type: 'text', required: true, placeholder: 'Financiamento imobili√°rio' }
        ],
        template: `DECLARA√á√ÉO DE RENDA

Eu, {{nome_completo}}, portador(a) do CPF n¬∫ {{cpf}} e RG n¬∫ {{rg}}, residente e domiciliado(a) √† {{endereco}}, declaro para os devidos fins que possuo renda mensal no valor de R$ {{renda_mensal}}, proveniente de sal√°rio como {{cargo}} na empresa {{empresa}}.

Esta declara√ß√£o √© feita para fins de {{finalidade}} e √© verdadeira em todos os seus termos.

Por ser express√£o da verdade, firmo a presente.

{{data_atual}}

_________________________________
{{nome_completo}}
CPF: {{cpf}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },
      {
        id: 'declaracao-residencia',
        name: 'Declara√ß√£o de Resid√™ncia',
        type: 'certificate',
        description: 'Declara√ß√£o de resid√™ncia',
        fields: [
          { name: 'declarante_cpf', label: 'CPF do Declarante', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'declarante_nome', label: 'Nome do Declarante', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'declarante_rg', label: 'RG do Declarante', type: 'text', required: true, placeholder: '12.345.678-9' },
          { name: 'residente_cpf', label: 'CPF do Residente', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'residente_nome', label: 'Nome do Residente', type: 'text', required: true, placeholder: 'Maria Silva' },
          { name: 'endereco_residencia', label: 'Endere√ßo da Resid√™ncia', type: 'text', required: true, placeholder: 'Rua das Flores, 123' },
          { name: 'tempo_residencia', label: 'Tempo de Resid√™ncia', type: 'text', required: true, placeholder: '2 anos' },
          { name: 'finalidade', label: 'Finalidade', type: 'text', required: true, placeholder: 'Comprova√ß√£o de endere√ßo' }
        ],
        template: `DECLARA√á√ÉO DE RESID√äNCIA

Eu, {{declarante_nome}}, portador do CPF {{declarante_cpf}} e RG {{declarante_rg}}, DECLARO sob as penas da lei que {{residente_nome}}, portador do CPF {{residente_cpf}}, reside no endere√ßo {{endereco_residencia}} h√° {{tempo_residencia}}.

Esta declara√ß√£o √© feita para fins de {{finalidade}}.

Por ser verdade, firmo a presente.

{{data_atual}}

_________________________________
{{declarante_nome}}
Declarante`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== FINANCEIRO =====
      {
        id: 'recibo-pagamento',
        name: 'Recibo de Pagamento',
        type: 'form',
        description: 'Recibo para comprova√ß√£o de pagamento',
        fields: [
          { name: 'pagador_cnpj_cpf', label: 'CNPJ/CPF do Pagador', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'pagador_nome', label: 'Nome do Pagador', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'recebedor_cnpj_cpf', label: 'CNPJ/CPF do Recebedor', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'recebedor_nome', label: 'Nome do Recebedor', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'valor_pago', label: 'Valor Pago (R$)', type: 'text', required: true, placeholder: '1.500,00' },
          { name: 'referente_pagamento', label: 'Referente ao Pagamento', type: 'textarea', required: true, placeholder: 'Servi√ßos de consultoria...' },
          { name: 'forma_pagamento', label: 'Forma de Pagamento', type: 'select', required: true, options: ['Dinheiro', 'PIX', 'Transfer√™ncia', 'Cart√£o', 'Cheque'] },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `RECIBO DE PAGAMENTO

Eu, {{recebedor_nome}}, inscrito no CPF/CNPJ {{recebedor_cnpj_cpf}}, recebi de {{pagador_nome}}, inscrito no CPF/CNPJ {{pagador_cnpj_cpf}}, a quantia de R$ {{valor_pago}}, referente a {{referente_pagamento}}.

Forma de pagamento: {{forma_pagamento}}

Para clareza firmo o presente recibo.

{{cidade}}, {{data_atual}}

_________________________________
{{recebedor_nome}}
Recebedor`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== CONSTRU√á√ÉO CIVIL =====
      {
        id: 'contrato-construcao',
        name: 'Contrato de Presta√ß√£o de Servi√ßos de Constru√ß√£o',
        type: 'contract',
        description: 'Contrato para servi√ßos de constru√ß√£o civil',
        fields: [
          { name: 'contratante_cnpj_cpf', label: 'CNPJ/CPF do Contratante', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'contratante_nome', label: 'Nome do Contratante', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'contratante_endereco', label: 'Endere√ßo do Contratante', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'construtor_cnpj_cpf', label: 'CNPJ/CPF do Construtor', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'construtor_nome', label: 'Nome/Raz√£o Social do Construtor', type: 'text', required: true, placeholder: 'Construtora ABC Ltda' },
          { name: 'construtor_endereco', label: 'Endere√ßo do Construtor', type: 'text', required: true, placeholder: 'Rua Constru√ß√£o, 456' },
          { name: 'engenheiro_nome', label: 'Nome do Engenheiro Respons√°vel', type: 'text', required: true, placeholder: 'Eng. Carlos Santos' },
          { name: 'crea_numero', label: 'CREA', type: 'text', required: true, placeholder: 'CREA 123456' },
          { name: 'obra_endereco', label: 'Endere√ßo da Obra', type: 'text', required: true, placeholder: 'Rua da Obra, 789' },
          { name: 'tipo_obra', label: 'Tipo de Obra', type: 'select', required: true, options: ['Constru√ß√£o', 'Reforma', 'Amplia√ß√£o', 'Demoli√ß√£o'] },
          { name: 'valor_obra', label: 'Valor da Obra (R$)', type: 'text', required: true, placeholder: '150.000,00' },
          { name: 'prazo_meses', label: 'Prazo (meses)', type: 'number', required: true, placeholder: '6' },
          { name: 'data_inicio', label: 'Data de In√≠cio', type: 'date', required: true },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSTRU√á√ÉO

CONTRATANTE: {{contratante_nome}}, CPF/CNPJ {{contratante_cnpj_cpf}}, residente √† {{contratante_endereco}}

CONTRATADO: {{construtor_nome}}, CNPJ/CPF {{construtor_cnpj_cpf}}, com sede √† {{construtor_endereco}}

RESPONS√ÅVEL T√âCNICO: {{engenheiro_nome}}, {{crea_numero}}

OBRA: {{tipo_obra}} no endere√ßo {{obra_endereco}}

VALOR: R$ {{valor_obra}}

PRAZO: {{prazo_meses}} meses a partir de {{data_inicio}}

RESPONSABILIDADES:
- Fornecimento de materiais e m√£o de obra
- Cumprimento de normas t√©cnicas e ambientais
- Entrega conforme projeto aprovado

{{cidade}}, {{data_atual}}

_____________________          _____________________
   CONTRATANTE                  CONTRATADO`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== E-COMMERCE/DIGITAL =====
      {
        id: 'termos-uso-lgpd',
        name: 'Termos de Uso e Pol√≠tica de Privacidade (LGPD)',
        type: 'custom',
        description: 'Termos de uso conforme LGPD',
        fields: [
          { name: 'empresa_cnpj', label: 'CNPJ da Empresa', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empresa_nome', label: 'Raz√£o Social', type: 'text', required: true, placeholder: 'Tech Solutions Ltda' },
          { name: 'empresa_endereco', label: 'Endere√ßo da Empresa', type: 'text', required: true, placeholder: 'Rua Digital, 123' },
          { name: 'site_url', label: 'URL do Site', type: 'text', required: true, placeholder: 'www.exemplo.com.br' },
          { name: 'email_contato', label: 'Email de Contato', type: 'text', required: true, placeholder: 'contato@exemplo.com.br' },
          { name: 'dpo_nome', label: 'Nome do DPO', type: 'text', required: false, placeholder: 'Ana Silva (opcional)' },
          { name: 'dpo_email', label: 'Email do DPO', type: 'text', required: false, placeholder: 'dpo@exemplo.com.br' }
        ],
        template: `TERMOS DE USO E POL√çTICA DE PRIVACIDADE

{{empresa_nome}}, CNPJ {{empresa_cnpj}}, situada √† {{empresa_endereco}}, estabelece os seguintes termos para uso do site {{site_url}}:

1. ACEITA√á√ÉO DOS TERMOS
Ao acessar nosso site, voc√™ concorda com estes termos.

2. COLETA DE DADOS (LGPD)
Coletamos apenas dados necess√°rios para presta√ß√£o dos servi√ßos, conforme Lei Geral de Prote√ß√£o de Dados.

3. USO DOS DADOS
Seus dados s√£o utilizados exclusivamente para:
- Presta√ß√£o de servi√ßos contratados
- Comunica√ß√£o sobre nossos servi√ßos
- Cumprimento de obriga√ß√µes legais

4. DIREITOS DO TITULAR
Voc√™ pode solicitar acesso, corre√ß√£o ou exclus√£o de seus dados atrav√©s do email {{email_contato}}.

5. ENCARREGADO DE DADOS
{{dpo_nome}} - {{dpo_email}}

6. CONTATO
Para d√∫vidas: {{email_contato}}

√öltima atualiza√ß√£o: {{data_atual}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== SA√öDE/EDUCA√á√ÉO =====
      {
        id: 'atestado-medico',
        name: 'Atestado M√©dico',
        type: 'certificate',
        description: 'Atestado m√©dico para afastamento',
        fields: [
          { name: 'medico_nome', label: 'Nome do M√©dico', type: 'text', required: true, placeholder: 'Dr. Carlos Silva' },
          { name: 'medico_crm', label: 'CRM', type: 'text', required: true, placeholder: 'CRM 123456-SP' },
          { name: 'medico_especialidade', label: 'Especialidade', type: 'text', required: true, placeholder: 'Cl√≠nico Geral' },
          { name: 'paciente_cpf', label: 'CPF do Paciente', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'paciente_nome', label: 'Nome do Paciente', type: 'text', required: true, placeholder: 'Jo√£o Santos' },
          { name: 'dias_afastamento', label: 'Dias de Afastamento', type: 'number', required: true, placeholder: '3' },
          { name: 'cid', label: 'CID (opcional)', type: 'text', required: false, placeholder: 'Z76.1' },
          { name: 'observacoes', label: 'Observa√ß√µes', type: 'textarea', required: false, placeholder: 'Repouso absoluto' }
        ],
        template: `ATESTADO M√âDICO

Atesto para os devidos fins que o(a) paciente {{paciente_nome}}, portador(a) do CPF {{paciente_cpf}}, esteve sob meus cuidados m√©dicos e dever√° afastar-se de suas atividades laborais pelo per√≠odo de {{dias_afastamento}} dias, a contar de {{data_atual}}.

{{cid}}

{{observacoes}}

{{data_atual}}

_____________________
{{medico_nome}}
{{medico_especialidade}}
{{medico_crm}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== UNI√ÉO EST√ÅVEL/DEPEND√äNCIA =====
      {
        id: 'declaracao-uniao-estavel',
        name: 'Declara√ß√£o de Uni√£o Est√°vel',
        type: 'certificate',
        description: 'Declara√ß√£o de uni√£o est√°vel',
        fields: [
          { name: 'companheiro1_cpf', label: 'CPF do Companheiro 1', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'companheiro1_nome', label: 'Nome do Companheiro 1', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'companheiro1_profissao', label: 'Profiss√£o do Companheiro 1', type: 'text', required: true, placeholder: 'Engenheiro' },
          { name: 'companheiro1_endereco', label: 'Endere√ßo do Companheiro 1', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'companheiro2_cpf', label: 'CPF do Companheiro 2', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'companheiro2_nome', label: 'Nome do Companheiro 2', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'companheiro2_profissao', label: 'Profiss√£o do Companheiro 2', type: 'text', required: true, placeholder: 'Professora' },
          { name: 'companheiro2_endereco', label: 'Endere√ßo do Companheiro 2', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'data_inicio_uniao', label: 'Data do In√≠cio da Uni√£o', type: 'date', required: true },
          { name: 'testemunha1_nome', label: 'Nome da Testemunha 1', type: 'text', required: true, placeholder: 'Carlos Souza' },
          { name: 'testemunha1_cpf', label: 'CPF da Testemunha 1', type: 'text', required: true, placeholder: '111.222.333-44' },
          { name: 'testemunha2_nome', label: 'Nome da Testemunha 2', type: 'text', required: true, placeholder: 'Ana Costa' },
          { name: 'testemunha2_cpf', label: 'CPF da Testemunha 2', type: 'text', required: true, placeholder: '555.666.777-88' }
        ],
        template: `DECLARA√á√ÉO DE UNI√ÉO EST√ÅVEL

Declaramos que {{companheiro1_nome}}, {{companheiro1_profissao}}, CPF {{companheiro1_cpf}}, residente √† {{companheiro1_endereco}}, e {{companheiro2_nome}}, {{companheiro2_profissao}}, CPF {{companheiro2_cpf}}, residente √† {{companheiro2_endereco}}, vivem em uni√£o est√°vel desde {{data_inicio_uniao}}, constituindo fam√≠lia nos moldes do art. 1.723 do C√≥digo Civil.

A presente declara√ß√£o √© feita para todos os fins de direito.

{{data_atual}}

_____________________          _____________________
{{companheiro1_nome}}          {{companheiro2_nome}}

TESTEMUNHAS:
___________________________    ___________________________
{{testemunha1_nome}}           {{testemunha2_nome}}
CPF: {{testemunha1_cpf}}       CPF: {{testemunha2_cpf}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== SEGUROS =====
      {
        id: 'comunicacao-sinistro',
        name: 'Comunica√ß√£o de Sinistro',
        type: 'report',
        description: 'Comunica√ß√£o de sinistro para seguradora',
        fields: [
          { name: 'segurado_cpf', label: 'CPF do Segurado', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'segurado_nome', label: 'Nome do Segurado', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'segurado_endereco', label: 'Endere√ßo do Segurado', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'segurado_telefone', label: 'Telefone do Segurado', type: 'text', required: true, placeholder: '(11) 99999-9999' },
          { name: 'apolice_numero', label: 'N√∫mero da Ap√≥lice', type: 'text', required: true, placeholder: '12345678' },
          { name: 'seguradora_nome', label: 'Nome da Seguradora', type: 'text', required: true, placeholder: 'Seguradora XYZ S.A.' },
          { name: 'data_sinistro', label: 'Data do Sinistro', type: 'date', required: true },
          { name: 'local_sinistro', label: 'Local do Sinistro', type: 'text', required: true, placeholder: 'Av. Paulista, 1000' },
          { name: 'descricao_sinistro', label: 'Descri√ß√£o do Sinistro', type: 'textarea', required: true, placeholder: 'Descreva o que aconteceu...' },
          { name: 'danos_estimados', label: 'Danos Estimados (R$)', type: 'text', required: false, placeholder: '5.000,00' }
        ],
        template: `COMUNICA√á√ÉO DE SINISTRO

√Ä {{seguradora_nome}}

SEGURADO: {{segurado_nome}}, CPF {{segurado_cpf}}
ENDERE√áO: {{segurado_endereco}}
TELEFONE: {{segurado_telefone}}
AP√ìLICE: {{apolice_numero}}

DADOS DO SINISTRO:
Data: {{data_sinistro}}
Local: {{local_sinistro}}

DESCRI√á√ÉO DOS FATOS:
{{descricao_sinistro}}

DANOS ESTIMADOS: R$ {{danos_estimados}}

Solicito a abertura do processo de sinistro conforme contrato.

{{data_atual}}

_________________________________
{{segurado_nome}}
Segurado`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== TERMO DE RESPONSABILIDADE =====
      {
        id: 'termo-responsabilidade-veiculo',
        name: 'Termo de Responsabilidade - Uso de Ve√≠culo',
        type: 'custom',
        description: 'Termo para uso respons√°vel de ve√≠culo da empresa',
        fields: [
          { name: 'empresa_cnpj', label: 'CNPJ da Empresa', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empresa_nome', label: 'Raz√£o Social', type: 'text', required: true, placeholder: 'Empresa ABC Ltda' },
          { name: 'funcionario_cpf', label: 'CPF do Funcion√°rio', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'funcionario_nome', label: 'Nome do Funcion√°rio', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'funcionario_endereco', label: 'Endere√ßo do Funcion√°rio', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'veiculo_marca', label: 'Marca do Ve√≠culo', type: 'text', required: true, placeholder: 'Honda' },
          { name: 'veiculo_modelo', label: 'Modelo', type: 'text', required: true, placeholder: 'Civic' },
          { name: 'veiculo_placa', label: 'Placa', type: 'text', required: true, placeholder: 'ABC-1234' },
          { name: 'finalidade_uso', label: 'Finalidade do Uso', type: 'text', required: true, placeholder: 'Servi√ßos externos da empresa' }
        ],
        template: `TERMO DE RESPONSABILIDADE - USO DE VE√çCULO

{{empresa_nome}}, CNPJ {{empresa_cnpj}}, autoriza {{funcionario_nome}}, CPF {{funcionario_cpf}}, residente √† {{funcionario_endereco}}, a utilizar o ve√≠culo {{veiculo_marca}} {{veiculo_modelo}}, placa {{veiculo_placa}}, para {{finalidade_uso}}.

RESPONSABILIDADES DO USU√ÅRIO:
- Usar o ve√≠culo apenas para fins autorizados
- Manter carteira de habilita√ß√£o v√°lida
- Comunicar imediatamente acidentes ou problemas
- Zelar pela conserva√ß√£o do ve√≠culo
- Responsabilizar-se por multas de tr√¢nsito

RESPONSABILIDADES DA EMPRESA:
- Manter seguro e documenta√ß√£o em dia
- Arcar com manuten√ß√£o preventiva

{{data_atual}}

_____________________          _____________________
   {{empresa_nome}}            {{funcionario_nome}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== CONTRATO SOCIAL (CONSTITUI√á√ÉO) =====
      {
        id: 'contrato-social-ltda',
        name: 'Contrato Social - LTDA',
        type: 'contract',
        description: 'Contrato social para sociedade limitada',
        fields: [
          { name: 'socio1_cpf', label: 'CPF do S√≥cio 1', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'socio1_nome', label: 'Nome do S√≥cio 1', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'socio1_endereco', label: 'Endere√ßo do S√≥cio 1', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'socio1_participacao', label: 'Participa√ß√£o do S√≥cio 1 (%)', type: 'number', required: true, placeholder: '70' },
          { name: 'socio2_cpf', label: 'CPF do S√≥cio 2', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'socio2_nome', label: 'Nome do S√≥cio 2', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'socio2_endereco', label: 'Endere√ßo do S√≥cio 2', type: 'text', required: true, placeholder: 'Rua B, 456' },
          { name: 'socio2_participacao', label: 'Participa√ß√£o do S√≥cio 2 (%)', type: 'number', required: true, placeholder: '30' },
          { name: 'empresa_nome', label: 'Nome da Empresa', type: 'text', required: true, placeholder: 'Tech Solutions Ltda' },
          { name: 'empresa_endereco', label: 'Endere√ßo da Empresa', type: 'text', required: true, placeholder: 'Rua Comercial, 789' },
          { name: 'objeto_social', label: 'Objeto Social', type: 'textarea', required: true, placeholder: 'Desenvolvimento de software...' },
          { name: 'capital_social', label: 'Capital Social (R$)', type: 'text', required: true, placeholder: '100.000,00' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `CONTRATO SOCIAL

S√ìCIOS:
{{socio1_nome}}, CPF {{socio1_cpf}}, residente √† {{socio1_endereco}} - {{socio1_participacao}}%
{{socio2_nome}}, CPF {{socio2_cpf}}, residente √† {{socio2_endereco}} - {{socio2_participacao}}%

DENOMINA√á√ÉO: {{empresa_nome}}

SEDE: {{empresa_endereco}}

OBJETO SOCIAL: {{objeto_social}}

CAPITAL SOCIAL: R$ {{capital_social}}, dividido em quotas

ADMINISTRA√á√ÉO: Todos os s√≥cios podem administrar

{{cidade}}, {{data_atual}}

_____________________          _____________________
  {{socio1_nome}}              {{socio2_nome}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== ACORDOS COMERCIAIS =====
      {
        id: 'acordo-parceria',
        name: 'Acordo de Parceria Comercial',
        type: 'contract',
        description: 'Acordo para parceria entre empresas',
        fields: [
          { name: 'empresa1_cnpj', label: 'CNPJ da Empresa 1', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empresa1_nome', label: 'Raz√£o Social da Empresa 1', type: 'text', required: true, placeholder: 'Tech Solutions Ltda' },
          { name: 'empresa1_endereco', label: 'Endere√ßo da Empresa 1', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'empresa2_cnpj', label: 'CNPJ da Empresa 2', type: 'text', required: true, placeholder: '98.765.432/0001-10' },
          { name: 'empresa2_nome', label: 'Raz√£o Social da Empresa 2', type: 'text', required: true, placeholder: 'Digital Corp S.A.' },
          { name: 'empresa2_endereco', label: 'Endere√ßo da Empresa 2', type: 'text', required: true, placeholder: 'Av. B, 456' },
          { name: 'objeto_parceria', label: 'Objeto da Parceria', type: 'textarea', required: true, placeholder: 'Desenvolvimento conjunto de solu√ß√µes...' },
          { name: 'prazo_anos', label: 'Prazo (anos)', type: 'number', required: true, placeholder: '2' },
          { name: 'divisao_resultados', label: 'Divis√£o de Resultados', type: 'text', required: true, placeholder: '50% para cada' },
          { name: 'cidade', label: 'Cidade', type: 'text', required: true, placeholder: 'S√£o Paulo' }
        ],
        template: `ACORDO DE PARCERIA COMERCIAL

EMPRESA 1: {{empresa1_nome}}, CNPJ {{empresa1_cnpj}}, sede √† {{empresa1_endereco}}

EMPRESA 2: {{empresa2_nome}}, CNPJ {{empresa2_cnpj}}, sede √† {{empresa2_endereco}}

OBJETO: {{objeto_parceria}}

PRAZO: {{prazo_anos}} anos

RESULTADOS: {{divisao_resultados}}

OBRIGA√á√ïES:
- Colabora√ß√£o t√©cnica e comercial
- Compartilhamento de recursos conforme acordado
- Manuten√ß√£o de sigilo de informa√ß√µes

{{cidade}}, {{data_atual}}

_____________________          _____________________
  {{empresa1_nome}}            {{empresa2_nome}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== DECLARA√á√ïES ESPEC√çFICAS =====
      {
        id: 'declaracao-dependencia',
        name: 'Declara√ß√£o de Depend√™ncia',
        type: 'certificate',
        description: 'Declara√ß√£o de depend√™ncia para fins legais',
        fields: [
          { name: 'declarante_cpf', label: 'CPF do Declarante', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'declarante_nome', label: 'Nome do Declarante', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'declarante_endereco', label: 'Endere√ßo do Declarante', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'dependente_cpf', label: 'CPF do Dependente', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'dependente_nome', label: 'Nome do Dependente', type: 'text', required: true, placeholder: 'Maria Silva' },
          { name: 'grau_parentesco', label: 'Grau de Parentesco', type: 'select', required: true, options: ['C√¥njuge', 'Filho(a)', 'Pai/M√£e', 'Irm√£o(√£)', 'Outros'] },
          { name: 'finalidade', label: 'Finalidade', type: 'text', required: true, placeholder: 'Imposto de Renda' },
          { name: 'renda_dependente', label: 'Renda do Dependente (R$)', type: 'text', required: false, placeholder: '0,00' }
        ],
        template: `DECLARA√á√ÉO DE DEPEND√äNCIA

Eu, {{declarante_nome}}, CPF {{declarante_cpf}}, residente √† {{declarante_endereco}}, DECLARO que {{dependente_nome}}, CPF {{dependente_cpf}}, √© meu(minha) {{grau_parentesco}} e encontra-se sob minha depend√™ncia econ√¥mica.

{{dependente_nome}} possui renda pr√≥pria de R$ {{renda_dependente}} mensais.

Esta declara√ß√£o √© feita para fins de {{finalidade}}.

{{data_atual}}

_________________________________
{{declarante_nome}}
Declarante`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== ORDEM DE SERVI√áO =====
      {
        id: 'ordem-servico',
        name: 'Ordem de Servi√ßo (OS)',
        type: 'form',
        description: 'Ordem de servi√ßo para controle interno',
        fields: [
          { name: 'cliente_cnpj_cpf', label: 'CNPJ/CPF do Cliente', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'cliente_nome', label: 'Nome do Cliente', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'cliente_endereco', label: 'Endere√ßo do Cliente', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'cliente_telefone', label: 'Telefone do Cliente', type: 'text', required: true, placeholder: '(11) 99999-9999' },
          { name: 'servico_descricao', label: 'Descri√ß√£o do Servi√ßo', type: 'textarea', required: true, placeholder: 'Manuten√ß√£o de equipamento...' },
          { name: 'servico_local', label: 'Local do Servi√ßo', type: 'text', required: true, placeholder: 'Endere√ßo onde ser√° realizado' },
          { name: 'data_prevista', label: 'Data Prevista', type: 'date', required: true },
          { name: 'responsavel_tecnico', label: 'Respons√°vel T√©cnico', type: 'text', required: true, placeholder: 'Carlos Santos' },
          { name: 'valor_estimado', label: 'Valor Estimado (R$)', type: 'text', required: false, placeholder: '500,00' },
          { name: 'observacoes', label: 'Observa√ß√µes', type: 'textarea', required: false, placeholder: 'Observa√ß√µes especiais...' }
        ],
        template: `ORDEM DE SERVI√áO

CLIENTE: {{cliente_nome}}
CPF/CNPJ: {{cliente_cnpj_cpf}}
ENDERE√áO: {{cliente_endereco}}
TELEFONE: {{cliente_telefone}}

SERVI√áO: {{servico_descricao}}

LOCAL: {{servico_local}}

DATA PREVISTA: {{data_prevista}}

RESPONS√ÅVEL: {{responsavel_tecnico}}

VALOR ESTIMADO: R$ {{valor_estimado}}

OBSERVA√á√ïES: {{observacoes}}

{{data_atual}}

_________________________________
Respons√°vel T√©cnico`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== PROPOSTAS COMERCIAIS =====
      {
        id: 'proposta-comercial',
        name: 'Proposta Comercial',
        type: 'form',
        description: 'Proposta comercial para clientes',
        fields: [
          { name: 'empresa_cnpj', label: 'CNPJ da Empresa', type: 'text', required: true, placeholder: '12.345.678/0001-90' },
          { name: 'empresa_nome', label: 'Raz√£o Social', type: 'text', required: true, placeholder: 'Tech Solutions Ltda' },
          { name: 'empresa_endereco', label: 'Endere√ßo da Empresa', type: 'text', required: true, placeholder: 'Rua Comercial, 123' },
          { name: 'empresa_telefone', label: 'Telefone da Empresa', type: 'text', required: true, placeholder: '(11) 3333-4444' },
          { name: 'empresa_email', label: 'Email da Empresa', type: 'text', required: true, placeholder: 'contato@empresa.com.br' },
          { name: 'cliente_cnpj_cpf', label: 'CNPJ/CPF do Cliente', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'cliente_nome', label: 'Nome do Cliente', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'proposta_descricao', label: 'Descri√ß√£o da Proposta', type: 'textarea', required: true, placeholder: 'Desenvolvimento de sistema...' },
          { name: 'valor_proposta', label: 'Valor da Proposta (R$)', type: 'text', required: true, placeholder: '25.000,00' },
          { name: 'prazo_entrega', label: 'Prazo de Entrega', type: 'text', required: true, placeholder: '60 dias' },
          { name: 'validade_proposta', label: 'Validade da Proposta', type: 'text', required: true, placeholder: '30 dias' },
          { name: 'forma_pagamento', label: 'Forma de Pagamento', type: 'textarea', required: true, placeholder: '50% inicio, 50% entrega' }
        ],
        template: `PROPOSTA COMERCIAL

DE: {{empresa_nome}}
CNPJ: {{empresa_cnpj}}
ENDERE√áO: {{empresa_endereco}}
TELEFONE: {{empresa_telefone}}
EMAIL: {{empresa_email}}

PARA: {{cliente_nome}}
CPF/CNPJ: {{cliente_cnpj_cpf}}

PROPOSTA: {{proposta_descricao}}

VALOR: R$ {{valor_proposta}}

PRAZO: {{prazo_entrega}}

PAGAMENTO: {{forma_pagamento}}

VALIDADE: Esta proposta √© v√°lida por {{validade_proposta}}.

{{data_atual}}

_________________________________
{{empresa_nome}}`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      },

      // ===== COMUNICA√á√ÉO DE VENDA DETRAN =====
      {
        id: 'comunicacao-venda-detran',
        name: 'Comunica√ß√£o de Venda (Detran)',
        type: 'form',
        description: 'Comunica√ß√£o de venda de ve√≠culo ao Detran',
        fields: [
          { name: 'vendedor_cpf', label: 'CPF do Vendedor', type: 'text', required: true, placeholder: '123.456.789-00' },
          { name: 'vendedor_nome', label: 'Nome do Vendedor', type: 'text', required: true, placeholder: 'Jo√£o Silva' },
          { name: 'vendedor_endereco', label: 'Endere√ßo do Vendedor', type: 'text', required: true, placeholder: 'Rua A, 123' },
          { name: 'comprador_cpf', label: 'CPF do Comprador', type: 'text', required: true, placeholder: '987.654.321-00' },
          { name: 'comprador_nome', label: 'Nome do Comprador', type: 'text', required: true, placeholder: 'Maria Santos' },
          { name: 'comprador_endereco', label: 'Endere√ßo do Comprador', type: 'text', required: true, placeholder: 'Rua B, 456' },
          { name: 'veiculo_marca', label: 'Marca', type: 'text', required: true, placeholder: 'Honda' },
          { name: 'veiculo_modelo', label: 'Modelo', type: 'text', required: true, placeholder: 'Civic' },
          { name: 'veiculo_ano', label: 'Ano/Modelo', type: 'text', required: true, placeholder: '2020/2021' },
          { name: 'veiculo_placa', label: 'Placa', type: 'text', required: true, placeholder: 'ABC-1234' },
          { name: 'veiculo_chassi', label: 'Chassi', type: 'text', required: true, placeholder: '9BWHE21JX24060831' },
          { name: 'data_venda', label: 'Data da Venda', type: 'date', required: true },
          { name: 'valor_venda', label: 'Valor da Venda (R$)', type: 'text', required: true, placeholder: '45.000,00' }
        ],
        template: `COMUNICA√á√ÉO DE VENDA - DETRAN

VENDEDOR:
Nome: {{vendedor_nome}}
CPF: {{vendedor_cpf}}
Endere√ßo: {{vendedor_endereco}}

COMPRADOR:
Nome: {{comprador_nome}}
CPF: {{comprador_cpf}}
Endere√ßo: {{comprador_endereco}}

VE√çCULO:
Marca/Modelo: {{veiculo_marca}} {{veiculo_modelo}}
Ano/Modelo: {{veiculo_ano}}
Placa: {{veiculo_placa}}
Chassi: {{veiculo_chassi}}

DATA DA VENDA: {{data_venda}}
VALOR: R$ {{valor_venda}}

Comunico a venda do ve√≠culo acima especificado.

{{data_atual}}

_________________________________
{{vendedor_nome}}
Vendedor`,
        createdAt: Date.now(),
        updatedAt: Date.now()
      }
    ];
  };

  const loadTemplates = async () => {
    try {
      const templatesQuery = query(
        collection(db, 'document_templates'),
        orderBy('name', 'asc')
      );
      const snapshot = await getDocs(templatesQuery);
      const templatesData = snapshot.docs.map((doc: any) => ({
        id: doc.id,
        ...doc.data()
      })) as DocumentTemplate[];

      if (templatesData.length === 0) {
        setTemplates(getLocalTemplates());
      } else {
        setTemplates(templatesData);
      }
    } catch (error) {
      console.error('Erro ao carregar templates:', error);
      // Usar templates locais como fallback
      setTemplates(getLocalTemplates());
    }
  };

  const loadDocuments = async () => {
    if (!user?.uid) return;

    try {
      const userDoc = await getDoc(doc(db, 'documentos_users', user.uid));
      if (!userDoc.exists()) return;

      const documentsQuery = query(
        collection(db, 'generated_documents'),
        where('createdBy', '==', user.uid),
        orderBy('createdAt', 'desc')
      );
      const snapshot = await getDocs(documentsQuery);
      const documentsData = snapshot.docs.map((doc: any) => ({
        id: doc.id,
        ...doc.data()
      })) as GeneratedDocument[];
      setDocuments(documentsData);
    } catch (error) {
      console.error('Erro ao carregar documentos:', error);
      // N√£o quebrar a aplica√ß√£o se n√£o conseguir carregar documentos
      setDocuments([]);
    }
  };

  const generateDocumentWithAI = async (prompt: string) => {
    setIsAiTyping(true);

    try {
      // Tentar usar IA primeiro, mas com fallback local
      let documentData;

      try {
        const response = await fetch('/api/ai/assist', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            messages: [
              {
                role: 'system',
                content: `Voc√™ √© um especialista em gera√ß√£o de documentos profissionais. Gere um documento baseado na solicita√ß√£o do usu√°rio.`
              },
              {
                role: 'user',
                content: prompt
              }
            ]
          })
        });

        const data = await response.json();

        if (data.choices && data.choices[0]) {
          const aiResponse = data.choices[0].message.content;
          try {
            documentData = JSON.parse(aiResponse);
          } catch {
            documentData = {
              tipo: 'Documento Personalizado',
              titulo: 'Documento Gerado por IA',
              conteudo_texto: aiResponse,
              conteudo_html: `<div style="font-family: Arial, sans-serif; line-height: 1.6; padding: 20px;">${aiResponse.replace(/\n/g, '<br>')}</div>`,
              campos_editaveis: [],
              instrucoes: 'Documento gerado automaticamente pela IA'
            };
          }
        } else {
          throw new Error('Resposta inv√°lida da IA');
        }
      } catch (error) {
        console.log('IA indispon√≠vel, usando gera√ß√£o local:', error);
        // Fallback para gera√ß√£o local
        documentData = generateDocumentLocally(prompt);
      }

      // Adicionar mensagem do assistente
      const assistantMessage: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `‚úÖ **Documento criado com sucesso!**

**Tipo:** ${documentData.tipo}
**T√≠tulo:** ${documentData.titulo}

${documentData.instrucoes || ''}

O documento foi gerado e est√° pronto para visualiza√ß√£o e impress√£o. Voc√™ pode edit√°-lo na aba "Gerar Documento" ou fazer o download diretamente.`,
        timestamp: Date.now()
      };

      setChatMessages(prev => [...prev, assistantMessage]);

      // Definir conte√∫do gerado
      setGeneratedContent(documentData.conteudo_texto);
      setGeneratedHtml(documentData.conteudo_html);

      // Salvar documento
      await saveAIDocument(documentData);

      // Alternar para aba do gerador
      setActiveTab('generator');

    } catch (error) {
      console.error('Erro ao gerar documento:', error);

      const errorMessage: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: '‚ùå Desculpe, ocorreu um erro ao gerar o documento. Tente novamente com uma descri√ß√£o mais espec√≠fica.',
        timestamp: Date.now()
      };

      setChatMessages(prev => [...prev, errorMessage]);
    }

    setIsAiTyping(false);
  };

  // Fun√ß√£o para gerar documento localmente (fallback)
  const generateDocumentLocally = (prompt: string) => {
    const currentDate = new Date().toLocaleDateString('pt-BR');
    const currentDateTime = new Date().toLocaleString('pt-BR');

    // Detectar tipo de documento baseado no prompt
    const promptLower = prompt.toLowerCase();

    if (promptLower.includes('procura√ß√£o')) {
      return {
        tipo: 'Procura√ß√£o',
        titulo: 'Procura√ß√£o Simples',
        conteudo_texto: `PROCURA√á√ÉO

Eu, _________________________, brasileiro(a), _______ (estado civil), _______ (profiss√£o), portador(a) do RG n¬∫ ______________ e CPF n¬∫ ________________, residente e domiciliado(a) √† ______________________________, por este instrumento particular, nomeio e constituo como meu(minha) bastante procurador(a) o(a) Sr.(a) _________________________, brasileiro(a), _______ (estado civil), _______ (profiss√£o), portador(a) do RG n¬∫ ______________ e CPF n¬∫ ________________, residente e domiciliado(a) √† ______________________________, para o fim espec√≠fico de:

- Representar-me perante reparti√ß√µes p√∫blicas, empresas e institui√ß√µes em geral;
- Assinar documentos em meu nome;
- Praticar todos os atos necess√°rios ao bom e fiel cumprimento do presente mandato.

A presente procura√ß√£o √© v√°lida por 90 (noventa) dias a contar desta data.

_______________________, _____ de _____________ de _______

_________________________________
Assinatura do Outorgante

RECONHECIMENTO DE FIRMA
________________________`,
        conteudo_html: `
<div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
  <div style="text-align: center; margin-bottom: 40px;">
    <h1 style="font-size: 18px; font-weight: bold; margin: 0; text-transform: uppercase;">PROCURA√á√ÉO</h1>
  </div>

  <div style="text-align: justify; margin-bottom: 30px;">
    <p>Eu, <strong>_________________________</strong>, brasileiro(a), <strong>_______</strong> (estado civil), <strong>_______</strong> (profiss√£o), portador(a) do RG n¬∫ <strong>______________</strong> e CPF n¬∫ <strong>________________</strong>, residente e domiciliado(a) √† <strong>______________________________</strong>, por este instrumento particular, nomeio e constituo como meu(minha) bastante procurador(a) o(a) Sr.(a) <strong>_________________________</strong>, brasileiro(a), <strong>_______</strong> (estado civil), <strong>_______</strong> (profiss√£o), portador(a) do RG n¬∫ <strong>______________</strong> e CPF n¬∫ <strong>________________</strong>, residente e domiciliado(a) √† <strong>______________________________</strong>, para o fim espec√≠fico de:</p>
  </div>

  <div style="margin: 30px 0;">
    <ul style="padding-left: 30px;">
      <li>Representar-me perante reparti√ß√µes p√∫blicas, empresas e institui√ß√µes em geral;</li>
      <li>Assinar documentos em meu nome;</li>
      <li>Praticar todos os atos necess√°rios ao bom e fiel cumprimento do presente mandato.</li>
    </ul>
  </div>

  <div style="margin: 30px 0;">
    <p>A presente procura√ß√£o √© v√°lida por <strong>90 (noventa) dias</strong> a contar desta data.</p>
  </div>

  <div style="margin-top: 60px;">
    <p>_______________________, _____ de _____________ de _______</p>
  </div>

  <div style="margin-top: 80px; text-align: center;">
    <div style="display: inline-block; border-top: 1px solid black; width: 300px; padding-top: 5px;">
      <strong>Assinatura do Outorgante</strong>
    </div>
  </div>

  <div style="margin-top: 60px;">
    <p><strong>RECONHECIMENTO DE FIRMA</strong></p>
    <p>________________________</p>
  </div>
</div>`,
        campos_editaveis: ['outorgante', 'procurador', 'finalidade'],
        instrucoes: 'Preencha os campos destacados com os dados do outorgante e procurador. Documento v√°lido por 90 dias.'
      };
    }

    if (promptLower.includes('contrato')) {
      return {
        tipo: 'Contrato',
        titulo: 'Contrato de Presta√ß√£o de Servi√ßos',
        conteudo_texto: `CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS

CONTRATANTE: _________________________, inscrito no CNPJ/CPF n¬∫ ________________, com sede/resid√™ncia √† _____________________________

CONTRATADO: _________________________, inscrito no CNPJ/CPF n¬∫ ________________, com sede/resid√™ncia √† _____________________________

OBJETO: O presente contrato tem por objeto ______________________________.

PRAZO: O prazo de vig√™ncia ser√° de _______ meses, iniciando em ___/___/______.

VALOR: O valor total dos servi√ßos ser√° de R$ ____________, pago conforme cronograma anexo.

OBRIGA√á√ïES DO CONTRATADO:
- Executar os servi√ßos com qualidade e pontualidade;
- Manter sigilo sobre informa√ß√µes confidenciais;
- Entregar o trabalho no prazo estabelecido.

OBRIGA√á√ïES DO CONTRATANTE:
- Fornecer informa√ß√µes necess√°rias para execu√ß√£o;
- Efetuar pagamentos conforme acordado;
- Dar condi√ß√µes adequadas para trabalho.

________________, ${currentDate}

_____________________          _____________________
    CONTRATANTE                    CONTRATADO`,
        conteudo_html: `
<div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
  <div style="text-align: center; margin-bottom: 40px;">
    <h1 style="font-size: 18px; font-weight: bold; margin: 0;">CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS</h1>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>CONTRATANTE:</strong> <u>_________________________</u>, inscrito no CNPJ/CPF n¬∫ <u>________________</u>, com sede/resid√™ncia √† <u>_____________________________</u></p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>CONTRATADO:</strong> <u>_________________________</u>, inscrito no CNPJ/CPF n¬∫ <u>________________</u>, com sede/resid√™ncia √† <u>_____________________________</u></p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>OBJETO:</strong> O presente contrato tem por objeto <u>______________________________</u>.</p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>PRAZO:</strong> O prazo de vig√™ncia ser√° de <u>_______</u> meses, iniciando em <u>___/___/______</u>.</p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>VALOR:</strong> O valor total dos servi√ßos ser√° de R$ <u>____________</u>, pago conforme cronograma anexo.</p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>OBRIGA√á√ïES DO CONTRATADO:</strong></p>
    <ul>
      <li>Executar os servi√ßos com qualidade e pontualidade;</li>
      <li>Manter sigilo sobre informa√ß√µes confidenciais;</li>
      <li>Entregar o trabalho no prazo estabelecido.</li>
    </ul>
  </div>

  <div style="margin-bottom: 40px;">
    <p><strong>OBRIGA√á√ïES DO CONTRATANTE:</strong></p>
    <ul>
      <li>Fornecer informa√ß√µes necess√°rias para execu√ß√£o;</li>
      <li>Efetuar pagamentos conforme acordado;</li>
      <li>Dar condi√ß√µes adequadas para trabalho.</li>
    </ul>
  </div>

  <div style="margin-top: 60px;">
    <p>________________, ${currentDate}</p>
  </div>

  <div style="margin-top: 80px; display: flex; justify-content: space-between;">
    <div style="text-align: center; width: 200px;">
      <div style="border-top: 1px solid black; padding-top: 5px;">
        <strong>CONTRATANTE</strong>
      </div>
    </div>
    <div style="text-align: center; width: 200px;">
      <div style="border-top: 1px solid black; padding-top: 5px;">
        <strong>CONTRATADO</strong>
      </div>
    </div>
  </div>
</div>`,
        campos_editaveis: ['contratante', 'contratado', 'objeto', 'prazo', 'valor'],
        instrucoes: 'Contrato padr√£o de presta√ß√£o de servi√ßos. Preencha os dados das partes e especifica√ß√µes do servi√ßo.'
      };
    }

    // Documento gen√©rico como fallback
    return {
      tipo: 'Documento Personalizado',
      titulo: `Documento - ${currentDate}`,
      conteudo_texto: `DOCUMENTO

Data: ${currentDate}

Assunto: ${prompt}

Prezado(a) Senhor(a),

Por meio deste documento, venho formalizar a seguinte solicita√ß√£o:

${prompt}

Atenciosamente,

_________________________________
Nome: _________________________
CPF: __________________________
Data: ${currentDate}`,
      conteudo_html: `
<div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
  <div style="text-align: center; margin-bottom: 40px;">
    <h1 style="font-size: 18px; font-weight: bold; margin: 0;">DOCUMENTO</h1>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>Data:</strong> ${currentDate}</p>
  </div>

  <div style="margin-bottom: 20px;">
    <p><strong>Assunto:</strong> ${prompt}</p>
  </div>

  <div style="margin-bottom: 30px;">
    <p>Prezado(a) Senhor(a),</p>
  </div>

  <div style="margin-bottom: 30px; text-align: justify;">
    <p>Por meio deste documento, venho formalizar a seguinte solicita√ß√£o:</p>
    <p style="margin-left: 20px; font-style: italic;">${prompt}</p>
  </div>

  <div style="margin-bottom: 30px;">
    <p>Atenciosamente,</p>
  </div>

  <div style="margin-top: 80px;">
    <p>_________________________________</p>
    <p><strong>Nome:</strong> _________________________</p>
    <p><strong>CPF:</strong> __________________________</p>
    <p><strong>Data:</strong> ${currentDate}</p>
  </div>
</div>`,
      campos_editaveis: ['nome', 'cpf', 'assunto'],
      instrucoes: 'Documento personalizado gerado localmente. Preencha os campos necess√°rios.'
    };
  };

  const saveAIDocument = async (documentData: any) => {
    if (!user) return;

    try {
      const documentToSave = {
        templateId: 'ai-generated',
        templateName: documentData.tipo,
        title: documentData.titulo,
        content: documentData.conteudo_texto,
        htmlContent: documentData.conteudo_html,
        data: {},
        createdAt: Date.now(),
        createdBy: user.uid,
        aiGenerated: true
      };

      await addDoc(collection(db, 'generated_documents'), documentToSave);
      await loadDocuments();
      console.log('‚úÖ Documento salvo com sucesso');
    } catch (error) {
      console.error('Erro ao salvar documento:', error);
      // N√£o bloquear a experi√™ncia do usu√°rio se n√£o conseguir salvar
      console.log('‚ö†Ô∏è Documento gerado mas n√£o foi poss√≠vel salvar no hist√≥rico');
    }
  };

  const sendChatMessage = async () => {
    if (!chatInput.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: chatInput,
      timestamp: Date.now()
    };

    setChatMessages(prev => [...prev, userMessage]);
    const currentInput = chatInput;
    setChatInput('');

    await generateDocumentWithAI(currentInput);
  };

  // Fun√ß√£o para buscar CEP
  const buscarCEP = async (cep: string) => {
    if (!cep || cep.length < 8) return null;

    try {
      const cepLimpo = cep.replace(/\D/g, '');
      const response = await fetch(`https://viacep.com.br/ws/${cepLimpo}/json/`);
      const data = await response.json();

      if (data.erro) {
        throw new Error('CEP n√£o encontrado');
      }

      return {
        logradouro: data.logradouro,
        bairro: data.bairro,
        cidade: data.localidade,
        uf: data.uf,
        cep: data.cep
      };
    } catch (error) {
      console.error('Erro ao buscar CEP:', error);
      return null;
    }
  };

  // Fun√ß√£o para buscar dados do CPF usando a API existente
  const buscarDadosCPF = async (cpf: string) => {
    if (!cpf || cpf.length < 11) return null;

    try {
      const cpfLimpo = cpf.replace(/\D/g, '');
      const response = await fetch(`/api/cpf?cpf=${cpfLimpo}`);
      const data = await response.json();

      if (data.success && data.nome) {
        return {
          nome: data.nome,
          cpf: formatCpfCnpj(cpf),
          nascimento: data.nascimento || null,
          genero: data.genero || null
        };
      }

      // Se a API retornou sucesso mas sem nome (CPF v√°lido mas sem dados)
      if (data.success && data.validFormat) {
        return {
          nome: null,
          cpf: formatCpfCnpj(cpf),
          nascimento: null,
          genero: null,
          message: data.message || 'CPF v√°lido, mas sem dados dispon√≠veis'
        };
      }

      return null;
    } catch (error) {
      console.error('Erro ao buscar dados do CPF:', error);
      return null;
    }
  };

  // Fun√ß√£o para buscar dados do CNPJ usando a API existente
  const buscarDadosCNPJ = async (cnpj: string) => {
    if (!cnpj || cnpj.length < 14) return null;

    try {
      const cnpjLimpo = cnpj.replace(/\D/g, '');
      const response = await fetch(`/api/cnpj?cnpj=${cnpjLimpo}`);

      if (!response.ok) {
        throw new Error('CNPJ n√£o encontrado ou inv√°lido');
      }

      const data = await response.json();

      if (data.nome) {
        return {
          razao_social: data.nome,
          nome_fantasia: data.fantasia || '',
          cnpj: formatCpfCnpj(cnpj),
          situacao: data.status || '',
          endereco: data.endereco ? `${data.endereco.street || ''}, ${data.endereco.number || ''}` : '',
          bairro: data.endereco?.district || '',
          cidade: data.endereco?.city || '',
          uf: data.endereco?.state || '',
          cep: data.endereco?.zip || '',
          telefone: data.endereco?.phone || '',
          email: data.email,
          atividade_principal: data.atividadePrincipal || ''
        };
      }

      return null;
    } catch (error) {
      console.error('Erro ao buscar dados do CNPJ:', error);
      return null;
    }
  };

  // Fun√ß√£o de formata√ß√£o unificada para CPF e CNPJ
  const formatCpfCnpj = (value: string) => {
    const cleaned = value.replace(/\D/g, '');

    if (cleaned.length <= 11) {
      return cleaned
        .replace(/(\d{3})(\d{3})(\d{3})(\d{0,2})/, (_, p1, p2, p3, p4) => {
          return [p1, p2, p3].filter(Boolean).join('.') + (p4 ? `-${p4}` : '');
        });
    } else {
      return cleaned
        .replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{0,2})/, (_, p1, p2, p3, p4, p5) => {
          return `${p1}.${p2}.${p3}/${p4}-${p5}`;
        });
    }
  };

  // Fun√ß√£o de valida√ß√£o unificada para CPF e CNPJ
  const isValidCpfCnpj = (value: string) => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.length === 11) {
      return /^\d{11}$/.test(cleaned);
    } else if (cleaned.length === 14) {
      return /^\d{14}$/.test(cleaned);
    }
    return false;
  };

  const formatCEP = (cep: string) => {
    const cepLimpo = cep.replace(/\D/g, '');
    if (cepLimpo.length === 0) return '';
    if (cepLimpo.length <= 5) return cepLimpo;
    return cepLimpo.replace(/(\d{5})(\d{1,3})/, '$1-$2').substring(0, 9);
  };

  const formatTelefone = (telefone: string) => {
    const telLimpo = telefone.replace(/\D/g, '');
    if (telLimpo.length === 0) return '';
    if (telLimpo.length <= 2) return `(${telLimpo}`;
    if (telLimpo.length <= 6) return `(${telLimpo.substring(0, 2)}) ${telLimpo.substring(2)}`;
    if (telLimpo.length <= 10) {
      return `(${telLimpo.substring(0, 2)}) ${telLimpo.substring(2, 6)}-${telLimpo.substring(6)}`;
    }
    return `(${telLimpo.substring(0, 2)}) ${telLimpo.substring(2, 7)}-${telLimpo.substring(7, 11)}`;
  };

  // Fun√ß√µes de valida√ß√£o usando a nova l√≥gica
  const validateCPF = (cpf: string): { valid: boolean; message?: string } => {
    const cpfLimpo = cpf.replace(/\D/g, '');

    if (cpfLimpo.length !== 11) {
      return { valid: false, message: 'CPF deve conter exatamente 11 d√≠gitos' };
    }

    if (!isValidCpfCnpj(cpfLimpo)) {
      return { valid: false, message: 'CPF inv√°lido' };
    }

    return { valid: true };
  };

  const validateCNPJ = (cnpj: string): { valid: boolean; message?: string } => {
    const cnpjLimpo = cnpj.replace(/\D/g, '');

    if (cnpjLimpo.length !== 14) {
      return { valid: false, message: 'CNPJ deve conter exatamente 14 d√≠gitos' };
    }

    if (!isValidCpfCnpj(cnpjLimpo)) {
      return { valid: false, message: 'CNPJ inv√°lido' };
    }

    return { valid: true };
  };

  const validateCEP = (cep: string): { valid: boolean; message?: string } => {
    const cepLimpo = cep.replace(/\D/g, '');
    if (cepLimpo.length !== 8) {
      return { valid: false, message: 'CEP deve conter exatamente 8 d√≠gitos' };
    }
    if (!/^\d{8}$/.test(cepLimpo)) {
      return { valid: false, message: 'CEP deve conter apenas n√∫meros' };
    }
    return { valid: true };
  };

  const validateTelefone = (telefone: string): { valid: boolean; message?: string } => {
    const telLimpo = telefone.replace(/\D/g, '');
    if (telLimpo.length < 10) {
      return { valid: false, message: 'Telefone deve ter pelo menos 10 d√≠gitos' };
    }
    if (telLimpo.length > 11) {
      return { valid: false, message: 'Telefone deve ter no m√°ximo 11 d√≠gitos' };
    }
    // Verificar se o DDD √© v√°lido (11-99)
    const ddd = parseInt(telLimpo.substring(0, 2));
    if (ddd < 11 || ddd > 99) {
      return { valid: false, message: 'DDD inv√°lido. Deve estar entre 11 e 99' };
    }
    return { valid: true };
  };

  // Fun√ß√£o para aplicar m√°scara durante a digita√ß√£o
  const applyMask = (value: string, fieldName: string): string => {
    if (fieldName.toLowerCase().includes('cpf') || fieldName.toLowerCase().includes('cnpj')) {
      return formatCpfCnpj(value);
    } else if (fieldName.toLowerCase().includes('cep')) {
      return formatCEP(value);
    } else if (fieldName.toLowerCase().includes('telefone') || fieldName.toLowerCase().includes('fone')) {
      return formatTelefone(value);
    }
    return value;
  };

  // Fun√ß√£o para preencher automaticamente baseado no CEP
  const preencherPorCEP = async (cep: string, fieldName: string) => {
    const validation = validateCEP(cep);
    if (!validation.valid) {
      alert(`‚ùå ${validation.message}`);
      return;
    }

    // Mostrar loading
    const loadingAlert = document.createElement('div');
    loadingAlert.innerHTML = 'üîç Buscando endere√ßo...';
    loadingAlert.style.cssText = `
      position: fixed; top: 20px; right: 20px; z-index: 10000;
      background: #3b82f6; color: white; padding: 1rem;
      border-radius: 0.5rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    `;
    document.body.appendChild(loadingAlert);

    try {
      const dadosCEP = await buscarCEP(cep);

      if (dadosCEP) {
        const novoFormData = { ...formData };

        // Mapear campos do CEP para os campos do formul√°rio
        const mapeamento: Record<string, string> = {
          'endereco': dadosCEP.logradouro,
          'bairro': dadosCEP.bairro,
          'cidade': dadosCEP.cidade,
          'uf': dadosCEP.uf,
          'cep': formatCEP(cep),
          // Para campos que contenham essas palavras
          'outorgante_endereco': `${dadosCEP.logradouro}, [N√öMERO], ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`,
          'procurador_endereco': `${dadosCEP.logradouro}, [N√öMERO], ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`,
          'contratante_endereco': `${dadosCEP.logradouro}, [N√öMERO], ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`,
          'contratado_endereco': `${dadosCEP.logradouro}, [N√öMERO], ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`
        };

        // Preencher campos relacionados ao endere√ßo
        Object.keys(mapeamento).forEach(campo => {
          if (selectedTemplate?.fields.some(field => field.name === campo)) {
            novoFormData[campo] = mapeamento[campo];
          }
        });

        // Para o campo atual, definir endere√ßo espec√≠fico
        if (fieldName.includes('endereco')) {
          novoFormData[fieldName] = `${dadosCEP.logradouro}, [N√öMERO], ${dadosCEP.bairro}`;
        }

        setFormData(novoFormData);

        loadingAlert.innerHTML = '‚úÖ Endere√ßo encontrado!';
        loadingAlert.style.background = '#10b981';
        setTimeout(() => document.body.removeChild(loadingAlert), 2000);

        // Focar no campo de n√∫mero se dispon√≠vel
        setTimeout(() => {
          const numeroInput = document.querySelector(`input[placeholder*="N√∫mero"]`) as HTMLInputElement;
          if (numeroInput) numeroInput.focus();
        }, 500);

      } else {
        loadingAlert.innerHTML = '‚ùå CEP n√£o encontrado';
        loadingAlert.style.background = '#ef4444';
        setTimeout(() => document.body.removeChild(loadingAlert), 3000);
      }
    } catch (error) {
      console.error('Erro ao buscar CEP:', error);
      loadingAlert.innerHTML = '‚ùå Erro ao buscar CEP';
      loadingAlert.style.background = '#ef4444';
      setTimeout(() => document.body.removeChild(loadingAlert), 3000);
    }
  };

  // Fun√ß√£o para preencher CEP espec√≠fico de uma se√ß√£o (outorgante/procurador)
  const preencherCepEspecifico = async (cep: string, sectionPrefix: string) => {
    const validation = validateCEP(cep);
    if (!validation.valid) {
      alert(`‚ùå ${validation.message}`);
      return;
    }

    // Mostrar loading
    const loadingAlert = document.createElement('div');
    loadingAlert.innerHTML = `üîç Buscando endere√ßo para ${sectionPrefix}...`;
    loadingAlert.style.cssText = `
      position: fixed; top: 20px; right: 20px; z-index: 10000;
      background: #3b82f6; color: white; padding: 1rem;
      border-radius: 0.5rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    `;
    document.body.appendChild(loadingAlert);

    try {
      const dadosCEP = await buscarCEP(cep);

      if (dadosCEP) {
        const novoFormData = { ...formData };

        // Salvar endere√ßo base para esta se√ß√£o
        const enderecoBase = `${dadosCEP.logradouro}, ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`;
        novoFormData[`${sectionPrefix}_endereco_base`] = enderecoBase;

        // Preencher o campo de endere√ßo espec√≠fico desta se√ß√£o
        const enderecoFieldName = `${sectionPrefix}_endereco`;
        const numeroAtual = formData[`${sectionPrefix}_numero`] || '';

        if (selectedTemplate?.fields.some(field => field.name === enderecoFieldName)) {
          novoFormData[enderecoFieldName] = numeroAtual ?
            `${dadosCEP.logradouro}, ${numeroAtual}, ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}` :
            `${dadosCEP.logradouro}, ${dadosCEP.bairro}, ${dadosCEP.cidade} - ${dadosCEP.uf}`;
        }

        // Salvar dados do CEP para uso posterior
        novoFormData[`${sectionPrefix}_cep_dados`] = JSON.stringify(dadosCEP);

        setFormData(novoFormData);

        loadingAlert.innerHTML = `‚úÖ Endere√ßo encontrado para ${sectionPrefix}!`;
        loadingAlert.style.background = '#10b981';
        setTimeout(() => document.body.removeChild(loadingAlert), 2000);

        // Focar no campo de n√∫mero espec√≠fico desta se√ß√£o
        setTimeout(() => {
          const numeroInput = document.querySelector(`input[value="${numeroAtual}"]`) as HTMLInputElement;
          if (numeroInput && numeroInput.placeholder?.includes('Ex: 123')) {
            numeroInput.focus();
          }
        }, 500);

      } else {
        loadingAlert.innerHTML = '‚ùå CEP n√£o encontrado';
        loadingAlert.style.background = '#ef4444';
        setTimeout(() => document.body.removeChild(loadingAlert), 3000);
      }
    } catch (error) {
      console.error('Erro ao buscar CEP:', error);
      loadingAlert.innerHTML = '‚ùå Erro ao buscar CEP';
      loadingAlert.style.background = '#ef4444';
      setTimeout(() => document.body.removeChild(loadingAlert), 3000);
    }
  };

  // Fun√ß√£o para preencher automaticamente baseado no CPF
  const preencherPorCPF = async (cpf: string, fieldName: string) => {
    const validation = validateCPF(cpf);
    if (!validation.valid) {
      alert(`‚ùå CPF inv√°lido: ${validation.message}`);
      return;
    }

    // Mostrar loading
    const loadingAlert = document.createElement('div');
    loadingAlert.innerHTML = 'üîç Consultando CPF...';
    loadingAlert.style.cssText = `
      position: fixed; top: 20px; right: 20px; z-index: 10000;
      background: #3b82f6; color: white; padding: 1rem;
      border-radius: 0.5rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    `;
    document.body.appendChild(loadingAlert);

    try {
      const dadosCPF = await buscarDadosCPF(cpf);

      if (dadosCPF) {
        const novoFormData = { ...formData };

        if (dadosCPF.nome) {
          // Detectar se√ß√£o baseada no campo atual
          const isOutorgante = fieldName.toLowerCase().includes('outorgante');
          const isProcurador = fieldName.toLowerCase().includes('procurador');
          const isContratante = fieldName.toLowerCase().includes('contratante');
          const isContratado = fieldName.toLowerCase().includes('contratado');

          // Mapear campos do CPF quando h√° dados
          const mapeamento: Record<string, string> = {
            'nome_completo': dadosCPF.nome,
            'nome': dadosCPF.nome,
            'cpf': formatCpfCnpj(cpf)
          };

          // Preencher campos espec√≠ficos da se√ß√£o
          if (isOutorgante) {
            mapeamento['outorgante_nome'] = dadosCPF.nome;
            mapeamento['outorgante_cpf'] = formatCpfCnpj(cpf);

            // Adicionar campos espec√≠ficos de g√™nero e nascimento se dispon√≠veis
            if (dadosCPF.genero) {
              const generoTexto = dadosCPF.genero === 'M' ? 'masculino' :
                                dadosCPF.genero === 'F' ? 'feminino' : 'n√£o informado';
              mapeamento['outorgante_genero'] = generoTexto;
              mapeamento['genero'] = generoTexto;
            }

            if (dadosCPF.nascimento) {
              // Converter YYYY-MM-DD para DD/MM/YYYY
              const dataNascimento = new Date(dadosCPF.nascimento);
              const nascimentoFormatado = dataNascimento.toLocaleDateString('pt-BR');
              mapeamento['outorgante_nascimento'] = nascimentoFormatado;
              mapeamento['data_nascimento'] = nascimentoFormatado;
              mapeamento['nascimento'] = nascimentoFormatado;
            }
          } else if (isProcurador) {
            mapeamento['procurador_nome'] = dadosCPF.nome;
            mapeamento['procurador_cpf'] = formatCpfCnpj(cpf);

            if (dadosCPF.genero) {
              const generoTexto = dadosCPF.genero === 'M' ? 'masculino' :
                                dadosCPF.genero === 'F' ? 'feminino' : 'n√£o informado';
              mapeamento['procurador_genero'] = generoTexto;
            }

            if (dadosCPF.nascimento) {
              const dataNascimento = new Date(dadosCPF.nascimento);
              const nascimentoFormatado = dataNascimento.toLocaleDateString('pt-BR');
              mapeamento['procurador_nascimento'] = nascimentoFormatado;
            }
          } else if (isContratante) {
            mapeamento['contratante_nome'] = dadosCPF.nome;
            mapeamento['contratante_cnpj_cpf'] = formatCpfCnpj(cpf);

            if (dadosCPF.genero) {
              const generoTexto = dadosCPF.genero === 'M' ? 'masculino' :
                                dadosCPF.genero === 'F' ? 'feminino' : 'n√£o informado';
              mapeamento['contratante_genero'] = generoTexto;
            }

            if (dadosCPF.nascimento) {
              const dataNascimento = new Date(dadosCPF.nascimento);
              const nascimentoFormatado = dataNascimento.toLocaleDateString('pt-BR');
              mapeamento['contratante_nascimento'] = nascimentoFormatado;
            }
          } else if (isContratado) {
            mapeamento['contratado_nome'] = dadosCPF.nome;
            mapeamento['contratado_cnpj_cpf'] = formatCpfCnpj(cpf);

            if (dadosCPF.genero) {
              const generoTexto = dadosCPF.genero === 'M' ? 'masculino' :
                                dadosCPF.genero === 'F' ? 'feminino' : 'n√£o informado';
              mapeamento['contratado_genero'] = generoTexto;
            }

            if (dadosCPF.nascimento) {
              const dataNascimento = new Date(dadosCPF.nascimento);
              const nascimentoFormatado = dataNascimento.toLocaleDateString('pt-BR');
              mapeamento['contratado_nascimento'] = nascimentoFormatado;
            }
          }

          // Preencher campos relacionados que existem no template
          Object.keys(mapeamento).forEach(campo => {
            if (selectedTemplate?.fields.some(field => field.name === campo)) {
              novoFormData[campo] = mapeamento[campo];
            }
          });

          // Mensagem de sucesso com detalhes dos dados encontrados
          let detalhes = ['Nome: ' + dadosCPF.nome];
          if (dadosCPF.genero) {
            const generoTexto = dadosCPF.genero === 'M' ? 'Masculino' :
                              dadosCPF.genero === 'F' ? 'Feminino' : 'N√£o informado';
            detalhes.push('G√™nero: ' + generoTexto);
          }
          if (dadosCPF.nascimento) {
            const dataNascimento = new Date(dadosCPF.nascimento);
            detalhes.push('Nascimento: ' + dataNascimento.toLocaleDateString('pt-BR'));
          }

          loadingAlert.innerHTML = '‚úÖ Dados encontrados!<br><small>' + detalhes.join(' ‚Ä¢ ') + '</small>';
          loadingAlert.style.background = '#10b981';
        } else {
          // CPF v√°lido mas sem dados - apenas formatar
          novoFormData[fieldName] = formatCpfCnpj(cpf);

          loadingAlert.innerHTML = dadosCPF.message || '‚ö†Ô∏è CPF v√°lido, mas sem dados dispon√≠veis';
          loadingAlert.style.background = '#f59e0b';
        }

        setFormData(novoFormData);
        setTimeout(() => document.body.removeChild(loadingAlert), 4000);

      } else {
        loadingAlert.innerHTML = '‚ö†Ô∏è CPF v√°lido, preenchimento manual necess√°rio';
        loadingAlert.style.background = '#f59e0b';
        setTimeout(() => document.body.removeChild(loadingAlert), 3000);

        // Apenas formatar o CPF se n√£o encontrar dados
        const novoFormData = { ...formData };
        novoFormData[fieldName] = formatCpfCnpj(cpf);
        setFormData(novoFormData);
      }
    } catch (error) {
      console.error('Erro ao buscar CPF:', error);
      loadingAlert.innerHTML = '‚ö†Ô∏è CPF v√°lido, preenchimento manual';
      loadingAlert.style.background = '#f59e0b';
      setTimeout(() => document.body.removeChild(loadingAlert), 3000);

      // Formatar o CPF mesmo se der erro na consulta
      const novoFormData = { ...formData };
      novoFormData[fieldName] = formatCpfCnpj(cpf);
      setFormData(novoFormData);
    }
  };

  // Fun√ß√£o para preencher automaticamente baseado no CNPJ
  const preencherPorCNPJ = async (cnpj: string, fieldName: string) => {
    const validation = validateCNPJ(cnpj);
    if (!validation.valid) {
      alert(`‚ùå CNPJ inv√°lido: ${validation.message}`);
      return;
    }

    // Mostrar loading
    const loadingAlert = document.createElement('div');
    loadingAlert.innerHTML = 'üîç Consultando CNPJ...';
    loadingAlert.style.cssText = `
      position: fixed; top: 20px; right: 20px; z-index: 10000;
      background: #3b82f6; color: white; padding: 1rem;
      border-radius: 0.5rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    `;
    document.body.appendChild(loadingAlert);

    try {
      const dadosCNPJ = await buscarDadosCNPJ(cnpj);

      if (dadosCNPJ && dadosCNPJ.razao_social) {
        const novoFormData = { ...formData };

        // Mapear campos do CNPJ
        const mapeamento: Record<string, string> = {
          'nome_completo': dadosCNPJ.razao_social,
          'razao_social': dadosCNPJ.razao_social,
          'nome_fantasia': dadosCNPJ.nome_fantasia,
          'contratante_nome': dadosCNPJ.razao_social,
          'contratado_nome': dadosCNPJ.razao_social,
          'empresa': dadosCNPJ.razao_social,
          'cnpj': formatCpfCnpj(cnpj),
          'contratante_cnpj_cpf': formatCpfCnpj(cnpj),
          'contratado_cnpj_cpf': formatCpfCnpj(cnpj),
          'endereco': dadosCNPJ.endereco,
          'contratante_endereco': `${dadosCNPJ.endereco}, ${dadosCNPJ.bairro}, ${dadosCNPJ.cidade} - ${dadosCNPJ.uf}`,
          'contratado_endereco': `${dadosCNPJ.endereco}, ${dadosCNPJ.bairro}, ${dadosCNPJ.cidade} - ${dadosCNPJ.uf}`,
          'cidade': dadosCNPJ.cidade,
          'telefone': dadosCNPJ.telefone ? formatTelefone(dadosCNPJ.telefone) : '',
          'email': dadosCNPJ.email,
          'atividade_principal': dadosCNPJ.atividade_principal
        };

        // Preencher campos relacionados
        Object.keys(mapeamento).forEach(campo => {
          if (selectedTemplate?.fields.some(field => field.name === campo)) {
            novoFormData[campo] = mapeamento[campo];
          }
        });

        setFormData(novoFormData);

        loadingAlert.innerHTML = '‚úÖ Empresa encontrada!';
        loadingAlert.style.background = '#10b981';
        setTimeout(() => document.body.removeChild(loadingAlert), 2000);

      } else {
        loadingAlert.innerHTML = '‚ö†Ô∏è CNPJ v√°lido, mas sem dados dispon√≠veis';
        loadingAlert.style.background = '#f59e0b';
        setTimeout(() => document.body.removeChild(loadingAlert), 3000);

        // Apenas formatar o CNPJ se n√£o encontrar dados
        const novoFormData = { ...formData };
        novoFormData[fieldName] = formatCpfCnpj(cnpj);
        setFormData(novoFormData);
      }
    } catch (error) {
      console.error('Erro ao buscar CNPJ:', error);
      loadingAlert.innerHTML = '‚ö†Ô∏è CNPJ v√°lido, preenchimento manual';
      loadingAlert.style.background = '#f59e0b';
      setTimeout(() => document.body.removeChild(loadingAlert), 3000);

      // Formatar o CNPJ mesmo se der erro na consulta
      const novoFormData = { ...formData };
      novoFormData[fieldName] = formatCpfCnpj(cnpj);
      setFormData(novoFormData);
    } finally {
      // Garantir que o loading seja removido
      setTimeout(() => {
        if (document.body.contains(loadingAlert)) {
          document.body.removeChild(loadingAlert);
        }
      }, 5000);
    }
  };

  const processOCR = async () => {
    if (ocrImages.length === 0) return;

    setOcrLoading(true);

    try {
      const ocrFormData = new FormData();
      ocrImages.forEach((file, index) => {
        ocrFormData.append(`image_${index}`, file);
      });

      // Simular OCR - em produ√ß√£o, integrar com Google Vision API ou similar
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Dados simulados extra√≠dos
      const mockExtractedData = {
        nome: 'Jo√£o Silva Santos',
        cpf: '123.456.789-00',
        rg: '12.345.678-9',
        endereco: 'Rua das Flores, 123',
        cidade: 'S√£o Paulo',
        cep: '01234-567',
        telefone: '(11) 98765-4321',
        email: 'joao.silva@email.com',
        empresa: 'Tech Solutions Ltda',
        cargo: 'Desenvolvedor Senior',
        salario: 'R$ 8.000,00',
        data_nascimento: '15/03/1985'
      };

      setExtractedData(mockExtractedData);

      // Se houver template selecionado, preencher automaticamente
      if (selectedTemplate) {
        const newFormObject = { ...formData };
        selectedTemplate.fields.forEach(field => {
          const extractedValue = mockExtractedData[field.name as keyof typeof mockExtractedData];
          if (extractedValue) {
            newFormObject[field.name] = extractedValue;
          }
        });
        setFormData(newFormObject);
      }

      alert('‚úÖ Dados extra√≠dos com sucesso das imagens!');

    } catch (error) {
      console.error('Erro no OCR:', error);
      alert('‚ùå Erro ao processar imagens. Tente novamente.');
    }

    setOcrLoading(false);
  };

  const generateDocument = async () => {
    if (!selectedTemplate || !user) return;

    setIsGenerating(true);
    try {
      let content = selectedTemplate.template;
      let htmlContent = selectedTemplate.template;

      // Substituir os campos do template pelos valores do formul√°rio
      selectedTemplate.fields.forEach(field => {
        const value = formData[field.name] || '';
        const regex = new RegExp(`{{${field.name}}}`, 'g');
        content = content.replace(regex, value);
        htmlContent = htmlContent.replace(regex, `<strong>${value}</strong>`);
      });

      // Adicionar data atual
      const currentDate = new Date().toLocaleDateString('pt-BR');
      content = content.replace(/{{data_atual}}/g, currentDate);
      htmlContent = htmlContent.replace(/{{data_atual}}/g, `<strong>${currentDate}</strong>`);

      // Criar vers√£o de preview com campos em destaque
      let previewContent = selectedTemplate.template;

      // Substituir campos preenchidos
      selectedTemplate.fields.forEach(field => {
        const value = formData[field.name] || '';
        const regex = new RegExp(`{{${field.name}}}`, 'g');
        if (value) {
          previewContent = previewContent.replace(regex, `<span style="background: #e8f5e8; padding: 2px 4px; border-radius: 3px; font-weight: bold;">${value}</span>`);
        } else {
          previewContent = previewContent.replace(regex, `<span style="background: #fff2cc; padding: 2px 4px; border-radius: 3px; border: 1px dashed #fbbf24; color: #92400e; font-weight: bold;">___ ${field.label} ___</span>`);
        }
      });

      // Adicionar data atual
      const previewCurrentDate = new Date().toLocaleDateString('pt-BR');
      previewContent = previewContent.replace(/{{data_atual}}/g, `<span style="background: #e8f5e8; padding: 2px 4px; border-radius: 3px; font-weight: bold;">${previewCurrentDate}</span>`);

      // Converter para HTML formatado
      htmlContent = `
        <div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="font-size: 18px; font-weight: bold; margin: 0; text-transform: uppercase;">${selectedTemplate.name}</h1>
          </div>
          <div style="text-align: justify; line-height: 1.8;">
            ${previewContent.replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>')}
          </div>
          <div style="margin-top: 50px; display: flex; justify-content: space-between;">
            <div style="text-align: center; width: 200px;">
              <div style="border-top: 1px solid black; padding-top: 5px;">
                <small>Assinatura</small>
              </div>
            </div>
            <div style="text-align: center; width: 200px;">
              <div style="border-top: 1px solid black; padding-top: 5px;">
                <small>Data: ${currentDate}</small>
              </div>
            </div>
          </div>
        </div>
      `;

      // Para o conte√∫do final (quando gerar), substituir pelos valores reais
      let finalContent = selectedTemplate.template;
      selectedTemplate.fields.forEach(field => {
        const value = formData[field.name] || '';
        const regex = new RegExp(`{{${field.name}}}`, 'g');
        finalContent = finalContent.replace(regex, value);
      });
      finalContent = finalContent.replace(/{{data_atual}}/g, currentDate);

      setGeneratedContent(finalContent);

      setGeneratedContent(content);
      setGeneratedHtml(htmlContent);

      // Salvar o documento gerado
      const documentData = {
        templateId: selectedTemplate.id,
        templateName: selectedTemplate.name,
        title: `${selectedTemplate.name} - ${currentDate}`,
        content,
        htmlContent,
        data: formData,
        createdAt: Date.now(),
        createdBy: user.uid
      };

      await addDoc(collection(db, 'generated_documents'), documentData);
      await loadDocuments();

    } catch (error) {
      console.error('Erro ao gerar documento:', error);
      alert('Erro ao gerar documento. Tente novamente.');
    }
    setIsGenerating(false);
  };

  const printDocument = () => {
    if (!generatedHtml) return;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Documento</title>
          <style>
            @media print {
              body { margin: 0; }
              @page { margin: 2cm; }
            }
          </style>
        </head>
        <body>
          ${generatedHtml}
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 500);
    }
  };

  const downloadDocument = (content: string, title: string, format: 'txt' | 'html' = 'txt') => {
    const element = document.createElement('a');
    const file = new Blob([format === 'html' ? generatedHtml : content], {
      type: format === 'html' ? 'text/html' : 'text/plain'
    });
    element.href = URL.createObjectURL(file);
    element.download = `${title}.${format}`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const deleteDocument = async (documentId: string) => {
    if (!confirm('Deseja realmente excluir este documento?')) return;

    try {
      await deleteDoc(doc(db, 'generated_documents', documentId));
      await loadDocuments();
    } catch (error) {
      console.error('Erro ao excluir documento:', error);
      alert('Erro ao excluir documento.');
    }
  };

  // Define the tabs for the document system
  const tabs = [
    { id: 'generator', label: 'Gerar', icon: 'üìù' },
    { id: 'chat', label: 'Chat IA', icon: 'ü§ñ' },
    { id: 'ocr', label: 'OCR', icon: 'üì∑' },
    { id: 'templates', label: 'Templates', icon: 'üìã' },
    { id: 'history', label: 'Hist√≥rico', icon: 'üìÇ' },
    { id: 'empresas', label: 'Empresas', icon: 'üè¢' }
  ];

  if (loading) {
    return (
      <div className="container" style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        minHeight: '100vh'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div className="spinner" style={{
            width: '40px',
            height: '40px',
            border: '4px solid var(--color-border)',
            borderTop: '4px solid var(--color-primary)',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 1rem'
          }}></div>
          <p>Carregando sistema...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .document-preview {
          background: white;
          border: 1px solid var(--color-border);
          border-radius: var(--radius);
          padding: 2rem;
          white-space: pre-wrap;
          font-family: 'Times New Roman', serif;
          line-height: 1.6;
          min-height: 400px;
          color: black;
        }

        .document-html-preview {
          background: white;
          border: 1px solid var(--color-border);
          border-radius: var(--radius);
          min-height: 400px;
          overflow: auto;
        }

        .template-card {
          background: var(--color-surface);
          border: 1px solid var(--color-border);
          border-radius: var(--radius);
          padding: 1.5rem;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .template-card:hover {
          border-color: var(--color-primary);
          transform: translateY(-2px);
          box-shadow: var(--shadow-medium);
        }

        .template-card.selected {
          border-color: var(--color-primary);
          background: var(--color-primary)10;
        }

        .tab-nav {
          display: flex;
          gap: 1rem;
          margin-bottom: 2rem;
          border-bottom: 1px solid var(--color-border);
          overflow-x: auto;
        }

        .tab-button {
          padding: 1rem 1.5rem;
          border: none;
          background: none;
          cursor: pointer;
          font-weight: 600;
          color: var(--color-textSecondary);
          border-bottom: 2px solid transparent;
          transition: all 0.3s ease;
          white-space: nowrap;
        }

        .tab-button.active {
          color: var(--color-primary);
          border-bottom-color: var(--color-primary);
        }

        .chat-container {
          height: 500px;
          display: flex;
          flex-direction: column;
          background: var(--color-surface);
          border-radius: var(--radius);
          border: 1px solid var(--color-border);
        }

        .chat-messages {
          flex: 1;
          overflow-y: auto;
          padding: 1rem;
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .message {
          max-width: 80%;
          padding: 1rem;
          border-radius: var(--radius);
          line-height: 1.5;
        }

        .message.user {
          align-self: flex-end;
          background: var(--color-primary);
          color: white;
        }

        .message.assistant {
          align-self: flex-start;
          background: var(--color-background);
          border: 1px solid var(--color-border);
        }

        .chat-input {
          padding: 1rem;
          border-top: 1px solid var(--color-border);
          display: flex;
          gap: 1rem;
        }

        .ocr-drop-zone {
          border: 2px dashed var(--color-border);
          border-radius: var(--radius);
          padding: 2rem;
          text-align: center;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .ocr-drop-zone:hover {
          border-color: var(--color-primary);
          background: var(--color-primary)05;
        }

        .ocr-drop-zone.dragover {
          border-color: var(--color-primary);
          background: var(--color-primary)10;
        }
      `}</style>

      {/* Header */}
      <div className="responsive-flex" style={{
        marginBottom: 'var(--gap-xl)',
        padding: 'var(--gap-md)',
        background: 'var(--gradient-surface)',
        borderRadius: 'var(--radius)',
        border: '1px solid var(--color-border)'
      }}>
        <div className="row" style={{ gap: 'var(--gap-md)' }}>
          <Link href="/sistemas" className="button button-ghost">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path d="M19 12H5M12 19l-7-7 7-7" stroke="currentColor" strokeWidth="2"/>
            </svg>
            Voltar aos Sistemas
          </Link>
          <div className="badge">
            üìÑ Gerador de Documentos v2.0 AI
          </div>
        </div>
        <ThemeSelector size="medium" />
      </div>

      {/* Hero */}
      <div className="card" style={{
        textAlign: 'center',
        marginBottom: 'var(--gap-xl)',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        color: 'white',
        padding: '3rem'
      }}>
        <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>ü§ñüìÑ</div>
        <h1 style={{ fontSize: '2.5rem', fontWeight: '800', marginBottom: '1rem' }}>
          Gerador Inteligente de Documentos
        </h1>
        <p style={{ fontSize: '1.2rem', opacity: 0.9 }}>
          Crie documentos profissionais com IA ‚Ä¢ Extraia dados de imagens ‚Ä¢ Chat inteligente
        </p>
      </div>

      {/* Navigation Tabs */}
      <div className="tab-nav">
        {tabs.map((tab) => (
          <button
            key={tab.id}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id as 'generator' | 'chat' | 'ocr' | 'templates' | 'history' | 'empresas')}
          >
            {tab.icon} {tab.label}
          </button>
        ))}
      </div>

      {/* Chat IA Tab */}
      {activeTab === 'chat' && (
        <div className="card">
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
            <h3>ü§ñ Assistente IA para Documentos</h3>
            <button
              className="button button-outline"
              onClick={() => {
                setChatMessages([]);
                initializeChatWelcome();
              }}
            >
              üîÑ Nova Conversa
            </button>
          </div>

          <div className="chat-container">
            <div className="chat-messages">
              {chatMessages.map(message => (
                <div key={message.id} className={`message ${message.role}`}>
                  <div style={{ whiteSpace: 'pre-line' }}>{message.content}</div>
                  <div style={{ fontSize: '0.8rem', opacity: 0.7, marginTop: '0.5rem' }}>
                    {new Date(message.timestamp).toLocaleTimeString('pt-BR')}
                  </div>
                </div>
              ))}
              {isAiTyping && (
                <div className="message assistant">
                  <div>ü§ñ Gerando documento...</div>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>

            <div className="chat-input">
              <input
                type="text"
                className="input"
                placeholder="Digite o tipo de documento que precisa..."
                value={chatInput}
                onChange={(e) => setChatInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                disabled={isAiTyping}
              />
              <button
                className="button button-primary"
                onClick={sendChatMessage}
                disabled={isAiTyping || !chatInput.trim()}
              >
                {isAiTyping ? '‚è≥' : 'üöÄ'}
              </button>
            </div>
          </div>

          <div style={{ marginTop: '1rem', padding: '1rem', background: 'var(--color-surface)', borderRadius: 'var(--radius)' }}>
            <h4>üí° Exemplos de prompts:</h4>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem', marginTop: '1rem' }}>
              {[
                'Contrato de presta√ß√£o de servi√ßos',
                'Declara√ß√£o de renda',
                'Relat√≥rio mensal de vendas',
                'Procura√ß√£o simples',
                'Atestado m√©dico',
                'Contrato de loca√ß√£o'
              ].map(example => (
                <button
                  key={example}
                  className="button button-ghost"
                  onClick={() => setChatInput(example)}
                  style={{ fontSize: '0.9rem', padding: '0.5rem' }}
                >
                  {example}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* OCR Tab */}
      {activeTab === 'ocr' && (
        <div className="card">
          <h3>üì∑ Extra√ß√£o de Dados de Imagens (OCR)</h3>

          <div
            className="ocr-drop-zone"
            onClick={() => document.getElementById('ocr-file-input')?.click()}
          >
            <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üì∏</div>
            <h4>Arraste imagens aqui ou clique para selecionar</h4>
            <p style={{ color: 'var(--color-textSecondary)', margin: '1rem 0' }}>
              Suporte para: JPG, PNG, PDF ‚Ä¢ M√°ximo 10MB por arquivo
            </p>
            <div className="button button-primary">
              üìÅ Selecionar Imagens
            </div>
          </div>

          <input
            id="ocr-file-input"
            type="file"
            multiple
            accept="image/*,.pdf"
            style={{ display: 'none' }}
            onChange={(e) => {
              const files = Array.from(e.target.files || []);
              setOcrImages(files);
            }}
          />

          {ocrImages.length > 0 && (
            <div style={{ marginTop: '2rem' }}>
              <h4>Imagens Selecionadas:</h4>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))', gap: '1rem', marginTop: '1rem' }}>
                {ocrImages.map((file, index) => (
                  <div key={index} style={{
                    padding: '1rem',
                    border: '1px solid var(--color-border)',
                    borderRadius: 'var(--radius)',
                    textAlign: 'center'
                  }}>
                    <div style={{ fontSize: '2rem', marginBottom: '0.5rem' }}>üìÑ</div>
                    <div style={{ fontSize: '0.9rem', wordBreak: 'break-word' }}>{file.name}</div>
                  </div>
                ))}
              </div>

              <div style={{ marginTop: '2rem', display: 'flex', gap: '1rem', justifyContent: 'center' }}>
                <button
                  className="button button-primary"
                  onClick={processOCR}
                  disabled={ocrLoading || ocrImages.length === 0}
                >
                  {ocrLoading ? '‚è≥ Processando...' : 'üîç Extrair Dados'}
                </button>
                <button
                  className="button button-outline"
                  onClick={() => setOcrImages([])}
                  disabled={ocrLoading}
                >
                  üóëÔ∏è Limpar
                </button>
              </div>
            </div>
          )}

          {Object.keys(extractedData).length > 0 && (
            <div style={{ marginTop: '2rem' }}>
              <h4>‚úÖ Dados Extra√≠dos:</h4>
              <div style={{
                background: 'var(--color-surface)',
                padding: '1rem',
                borderRadius: 'var(--radius)',
                border: '1px solid var(--color-border)'
              }}>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>
                  {Object.entries(extractedData).map(([key, value]) => (
                    <div key={key}>
                      <strong>{key}:</strong> {value}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Templates Tab */}
      {activeTab === 'templates' && (
        <div className="card">
          <h3>üìã Templates de Documentos</h3>

          {(() => {
            // Organizar templates por categoria
            const categorias = {
              'Jur√≠dico': templates.filter(t =>
                t.name.toLowerCase().includes('procura√ß√£o') ||
                t.name.toLowerCase().includes('confidencialidade') ||
                t.name.toLowerCase().includes('nda')
              ),
              'Comercial': templates.filter(t =>
                t.name.toLowerCase().includes('contrato') && (
                  t.name.toLowerCase().includes('servi√ßos') ||
                  t.name.toLowerCase().includes('compra') ||
                  t.name.toLowerCase().includes('venda') ||
                  t.name.toLowerCase().includes('loca√ß√£o') ||
                  t.name.toLowerCase().includes('parceria')
                )
              ),
              'Recursos Humanos': templates.filter(t =>
                t.name.toLowerCase().includes('trabalho') ||
                t.name.toLowerCase().includes('est√°gio') ||
                t.name.toLowerCase().includes('clt')
              ),
              'Fiscal/Cont√°bil': templates.filter(t =>
                t.name.toLowerCase().includes('declara√ß√£o') ||
                t.name.toLowerCase().includes('renda') ||
                t.name.toLowerCase().includes('resid√™ncia') ||
                t.name.toLowerCase().includes('depend√™ncia')
              ),
              'Financeiro': templates.filter(t =>
                t.name.toLowerCase().includes('recibo') ||
                t.name.toLowerCase().includes('pagamento')
              ),
              'Veicular': templates.filter(t =>
                t.name.toLowerCase().includes('ve√≠culo') ||
                t.name.toLowerCase().includes('detran') ||
                t.name.toLowerCase().includes('comunica√ß√£o')
              ),
              'Constru√ß√£o Civil': templates.filter(t =>
                t.name.toLowerCase().includes('constru√ß√£o') ||
                t.name.toLowerCase().includes('obra')
              ),
              'E-commerce/Digital': templates.filter(t =>
                t.name.toLowerCase().includes('termos') ||
                t.name.toLowerCase().includes('lgpd') ||
                t.name.toLowerCase().includes('privacidade')
              ),
              'Seguros': templates.filter(t =>
                t.name.toLowerCase().includes('sinistro') ||
                t.name.toLowerCase().includes('seguro')
              ),
              'Constitui√ß√£o': templates.filter(t =>
                t.name.toLowerCase().includes('social') ||
                t.name.toLowerCase().includes('ltda') ||
                t.name.toLowerCase().includes('mei')
              ),
              'Operacional': templates.filter(t =>
                t.name.toLowerCase().includes('ordem') ||
                t.name.toLowerCase().includes('proposta') ||
                t.name.toLowerCase().includes('termo') && t.name.toLowerCase().includes('responsabilidade')
              )
            };

            // Filtrar categorias vazias
            const categoriasComTemplates = Object.entries(categorias).filter(([_, temps]) => temps.length > 0);

            return (
              <div>
                {categoriasComTemplates.map(([categoria, categoryTemplates]) => (
                  <div key={categoria} style={{ marginBottom: '2rem' }}>
                    <h4 style={{
                      margin: '0 0 1rem 0',
                      padding: '1rem',
                      background: 'var(--color-primary)',
                      color: 'white',
                      borderRadius: 'var(--radius)',
                      fontSize: '1.1rem',
                      fontWeight: '700'
                    }}>
                      {categoria === 'Jur√≠dico' && '‚öñÔ∏è'}
                      {categoria === 'Comercial' && 'üíº'}
                      {categoria === 'Recursos Humanos' && 'üë•'}
                      {categoria === 'Fiscal/Cont√°bil' && 'üìä'}
                      {categoria === 'Financeiro' && 'üí∞'}
                      {categoria === 'Veicular' && 'üöó'}
                      {categoria === 'Constru√ß√£o Civil' && 'üèóÔ∏è'}
                      {categoria === 'E-commerce/Digital' && 'üíª'}
                      {categoria === 'Seguros' && 'üõ°Ô∏è'}
                      {categoria === 'Constitui√ß√£o' && 'üè¢'}
                      {categoria === 'Operacional' && '‚öôÔ∏è'}
                      {categoria}
                    </h4>

                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: '1rem' }}>
                      {categoryTemplates.map(template => (
                        <div
                          key={template.id}
                          className={`template-card ${selectedTemplate?.id === template.id ? 'selected' : ''}`}
                          onClick={() => {
                            setSelectedTemplate(template);
                            setActiveTab('generator');
                          }}
                        >
                          <h4>{template.name}</h4>
                          <p style={{ color: 'var(--color-textSecondary)', margin: '0.5rem 0' }}>
                            {template.description}
                          </p>
                          <div style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                            marginTop: '1rem'
                          }}>
                            <span className="badge">{template.type}</span>
                            <span style={{ fontSize: '0.9rem', color: 'var(--color-textSecondary)' }}>
                              {template.fields.length} campos
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}

                {templates.length === 0 && (
                  <div style={{ textAlign: 'center', padding: '3rem', color: 'var(--color-textSecondary)' }}>
                    <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üìã</div>
                    <p>Nenhum template dispon√≠vel</p>
                  </div>
                )}
              </div>
            );
          })()}
        </div>
      )}

      {/* Generator Tab */}
      {activeTab === 'generator' && (
        <div className="card">
          <h3>üìù Gerar Documento</h3>

          {!selectedTemplate ? (
            <div style={{ textAlign: 'center', padding: '3rem' }}>
              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üìã</div>
              <h4>Selecione um Template</h4>
              <p style={{ color: 'var(--color-textSecondary)', marginBottom: '2rem' }}>
                Escolha um template na aba "Templates" para come√ßar
              </p>
              <button
                className="button button-primary"
                onClick={() => setActiveTab('templates')}
              >
                üìã Ver Templates
              </button>
            </div>
          ) : (
            <div>
              <div style={{ marginBottom: '2rem', padding: '1rem', background: 'var(--color-surface)', borderRadius: 'var(--radius)' }}>
                <h4>{selectedTemplate.name}</h4>
                <p style={{ color: 'var(--color-textSecondary)', margin: '0.5rem 0' }}>
                  {selectedTemplate.description}
                </p>
                <button
                  className="button button-ghost"
                  onClick={() => {
                    setSelectedTemplate(null);
                    setGeneratedHtml('');
                    setGeneratedContent('');
                    setFormData({});
                  }}
                >
                  üîÑ Trocar Template
                </button>
              </div>

              {/* Inicializar preview do template */}
              {(() => {
                if (!generatedHtml && selectedTemplate) {
                  let previewContent = selectedTemplate.template;

                  selectedTemplate.fields.forEach(field => {
                    const regex = new RegExp(`{{${field.name}}}`, 'g');
                    previewContent = previewContent.replace(regex, `<span style="background: #fff2cc; padding: 2px 4px; border-radius: 3px; border: 1px dashed #fbbf24; color: #92400e; font-weight: bold;">___ ${field.label} ___</span>`);
                  });

                  const currentDate = new Date().toLocaleDateString('pt-BR');
                  previewContent = previewContent.replace(/{{data_atual}}/g, `<span style="background: #e8f5e8; padding: 2px 4px; border-radius: 3px; font-weight: bold;">${currentDate}</span>`);

                  const initialHtmlContent = `
                    <div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
                      <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="font-size: 18px; font-weight: bold; margin: 0; text-transform: uppercase;">${selectedTemplate.name}</h1>
                      </div>
                      <div style="text-align: justify; line-height: 1.8;">
                        ${previewContent.replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>')}
                      </div>
                    </div>
                  `;

                  // Atualizar o estado uma vez para inicializar o preview
                  setTimeout(() => setGeneratedHtml(initialHtmlContent), 0);
                }
                return null;
              })()}

              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '2rem' }}>
                <div>
                  <h4>üìù Preencher Campos</h4>

                  {/* Renderizar campos organizados por se√ß√µes individuais */}
                  {(() => {
                    // Organizar campos por categorias espec√≠ficas e inteligentes
                    const categorizeFields = (fields: any[]) => {
                      const categories = {
                        // Pessoas F√≠sicas
                        outorgante: fields.filter(f => f.name.toLowerCase().includes('outorgante')),
                        procurador: fields.filter(f => f.name.toLowerCase().includes('procurador')),

                        // Pessoas/Empresas - Contrato
                        contratante: fields.filter(f => f.name.toLowerCase().includes('contratante')),
                        contratado: fields.filter(f => f.name.toLowerCase().includes('contratado')),

                        // Pessoas - Vendas/Compras
                        vendedor: fields.filter(f => f.name.toLowerCase().includes('vendedor')),
                        comprador: fields.filter(f => f.name.toLowerCase().includes('comprador')),

                        // Pessoas - Loca√ß√£o
                        locador: fields.filter(f => f.name.toLowerCase().includes('locador')),
                        locatario: fields.filter(f => f.name.toLowerCase().includes('locatario') || f.name.toLowerCase().includes('locat√°rio')),

                        // Pessoas - Trabalho
                        empregador: fields.filter(f => f.name.toLowerCase().includes('empregador')),
                        empregado: fields.filter(f => f.name.toLowerCase().includes('empregado')),

                        // Pessoas - Est√°gio
                        empresa: fields.filter(f => f.name.toLowerCase().includes('empresa') && !f.name.toLowerCase().includes('empregador')),
                        estagiario: fields.filter(f => f.name.toLowerCase().includes('estagiario') || f.name.toLowerCase().includes('estagi√°rio')),

                        // Pessoas - Geral
                        declarante: fields.filter(f => f.name.toLowerCase().includes('declarante')),
                        residente: fields.filter(f => f.name.toLowerCase().includes('residente')),
                        paciente: fields.filter(f => f.name.toLowerCase().includes('paciente')),
                        medico: fields.filter(f => f.name.toLowerCase().includes('medico') || f.name.toLowerCase().includes('m√©dico')),
                        funcionario: fields.filter(f => f.name.toLowerCase().includes('funcionario') || f.name.toLowerCase().includes('funcion√°rio')),

                        // Relacionamentos
                        companheiro1: fields.filter(f => f.name.toLowerCase().includes('companheiro1')),
                        companheiro2: fields.filter(f => f.name.toLowerCase().includes('companheiro2')),
                        testemunha: fields.filter(f => f.name.toLowerCase().includes('testemunha')),

                        // Seguros
                        segurado: fields.filter(f => f.name.toLowerCase().includes('segurado')),
                        seguradora: fields.filter(f => f.name.toLowerCase().includes('seguradora')),

                        // Ve√≠culos
                        veiculo: fields.filter(f => f.name.toLowerCase().includes('veiculo') || f.name.toLowerCase().includes('ve√≠culo')),

                        // Im√≥veis/Obras
                        imovel: fields.filter(f => f.name.toLowerCase().includes('imovel') || f.name.toLowerCase().includes('im√≥vel') || f.name.toLowerCase().includes('obra')),

                        // Objetos/Servi√ßos
                        objeto: fields.filter(f =>
                          f.name.toLowerCase().includes('objeto') ||
                          f.name.toLowerCase().includes('servico') ||
                          f.name.toLowerCase().includes('servi√ßo') ||
                          f.name.toLowerCase().includes('bem')
                        ),

                        // Valores/Financeiro
                        financeiro: fields.filter(f =>
                          f.name.toLowerCase().includes('valor') ||
                          f.name.toLowerCase().includes('preco') ||
                          f.name.toLowerCase().includes('pre√ßo') ||
                          f.name.toLowerCase().includes('salario') ||
                          f.name.toLowerCase().includes('sal√°rio') ||
                          f.name.toLowerCase().includes('renda') ||
                          f.name.toLowerCase().includes('pagamento') ||
                          f.name.toLowerCase().includes('capital')
                        ),

                        // Datas/Prazos
                        temporal: fields.filter(f =>
                          f.name.toLowerCase().includes('data') ||
                          f.name.toLowerCase().includes('prazo') ||
                          f.name.toLowerCase().includes('inicio') ||
                          f.name.toLowerCase().includes('in√≠cio') ||
                          f.name.toLowerCase().includes('fim') ||
                          f.name.toLowerCase().includes('nascimento') ||
                          f.name.toLowerCase().includes('validade')
                        ),

                        // Localiza√ß√£o
                        localizacao: fields.filter(f =>
                          f.name.toLowerCase().includes('cidade') ||
                          f.name.toLowerCase().includes('local') ||
                          f.name.toLowerCase().includes('endereco_')
                        ),

                        // Outros
                        outros: fields.filter(f => {
                          const fieldName = f.name.toLowerCase();
                          return !fieldName.includes('outorgante') &&
                                 !fieldName.includes('procurador') &&
                                 !fieldName.includes('contratante') &&
                                 !fieldName.includes('contratado') &&
                                 !fieldName.includes('vendedor') &&
                                 !fieldName.includes('comprador') &&
                                 !fieldName.includes('locador') &&
                                 !fieldName.includes('locatario') &&
                                 !fieldName.includes('locat√°rio') &&
                                 !fieldName.includes('empregador') &&
                                 !fieldName.includes('empregado') &&
                                 !fieldName.includes('empresa') &&
                                 !fieldName.includes('estagiario') &&
                                 !fieldName.includes('estagi√°rio') &&
                                 !fieldName.includes('declarante') &&
                                 !fieldName.includes('residente') &&
                                 !fieldName.includes('paciente') &&
                                 !fieldName.includes('medico') &&
                                 !fieldName.includes('m√©dico') &&
                                 !fieldName.includes('funcionario') &&
                                 !fieldName.includes('funcion√°rio') &&
                                 !fieldName.includes('companheiro') &&
                                 !fieldName.includes('testemunha') &&
                                 !fieldName.includes('segurado') &&
                                 !fieldName.includes('seguradora') &&
                                 !fieldName.includes('veiculo') &&
                                 !fieldName.includes('ve√≠culo') &&
                                 !fieldName.includes('imovel') &&
                                 !fieldName.includes('im√≥vel') &&
                                 !fieldName.includes('obra') &&
                                 !fieldName.includes('objeto') &&
                                 !fieldName.includes('servico') &&
                                 !fieldName.includes('servi√ßo') &&
                                 !fieldName.includes('bem') &&
                                 !fieldName.includes('valor') &&
                                 !fieldName.includes('preco') &&
                                 !fieldName.includes('pre√ßo') &&
                                 !fieldName.includes('salario') &&
                                 !fieldName.includes('sal√°rio') &&
                                 !fieldName.includes('renda') &&
                                 !fieldName.includes('pagamento') &&
                                 !fieldName.includes('capital') &&
                                 !fieldName.includes('data') &&
                                 !fieldName.includes('prazo') &&
                                 !fieldName.includes('inicio') &&
                                 !fieldName.includes('in√≠cio') &&
                                 !fieldName.includes('fim') &&
                                 !fieldName.includes('nascimento') &&
                                 !fieldName.includes('validade') &&
                                 !fieldName.includes('cidade') &&
                                 !fieldName.includes('local') &&
                                 !fieldName.includes('endereco_');
                        })
                      };

                      return categories;
                    };

                    const categorizedFields = categorizeFields(selectedTemplate?.fields || []);

                    const renderField = (field: any) => (
                      <div key={field.name} style={{ marginBottom: '1rem' }}>
                        <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '600' }}>
                          {field.label} {field.required && <span style={{ color: 'red' }}>*</span>}
                        </label>

                        {field.type === 'textarea' ? (
                          <textarea
                            className="input"
                            value={formData[field.name] || ''}
                            onChange={(e) => setFormData(prev => ({ ...prev, [field.name]: e.target.value }))}
                            placeholder={field.placeholder}
                            rows={4}
                          />
                        ) : field.type === 'select' ? (
                          <select
                            className="input"
                            value={formData[field.name] || ''}
                            onChange={(e) => setFormData(prev => ({ ...prev, [field.name]: e.target.value }))}
                          >
                            <option value="">Selecione...</option>
                            {field.options?.map((option: string) => (
                              <option key={option} value={option}>{option}</option>
                            ))}
                          </select>
                        ) : (
                          <div style={{ position: 'relative' }}>
                            <input
                              type={field.type}
                              className="input"
                              value={formData[field.name] || ''}
                              onChange={(e) => {
                                let value = e.target.value;

                                // Aplicar m√°scara durante a digita√ß√£o
                                const maskedValue = applyMask(value, field.name);

                                const newFormData = { ...formData, [field.name]: maskedValue };
                                setFormData(newFormData);

                                // Atualizar preview em tempo real
                                if (selectedTemplate) {
                                  let previewContent = selectedTemplate.template;

                                  selectedTemplate.fields.forEach(templateField => {
                                    const fieldValue = newFormData[templateField.name] || '';
                                    const regex = new RegExp(`{{${templateField.name}}}`, 'g');
                                    if (fieldValue) {
                                      previewContent = previewContent.replace(regex, `<span style="background: #e8f5e8; padding: 2px 4px; border-radius: 3px; font-weight: bold;">${fieldValue}</span>`);
                                    } else {
                                      previewContent = previewContent.replace(regex, `<span style="background: #fff2cc; padding: 2px 4px; border-radius: 3px; border: 1px dashed #fbbf24; color: #92400e; font-weight: bold;">___ ${templateField.label} ___</span>`);
                                    }
                                  });

                                  const previewCurrentDate = new Date().toLocaleDateString('pt-BR');
                                  previewContent = previewContent.replace(/{{data_atual}}/g, `<span style="background: #e8f5e8; padding: 2px 4px; border-radius: 3px; font-weight: bold;">${previewCurrentDate}</span>`);

                                  const updatedHtmlContent = `
                                    <div style="font-family: 'Times New Roman', serif; font-size: 14px; line-height: 1.8; max-width: 800px; margin: 0 auto; padding: 40px; background: white; color: black;">
                                      <div style="text-align: center; margin-bottom: 30px;">
                                        <h1 style="font-size: 18px; font-weight: bold; margin: 0; text-transform: uppercase;">${selectedTemplate.name}</h1>
                                      </div>
                                      <div style="text-align: justify; line-height: 1.8;">
                                        ${previewContent.replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>')}
                                      </div>
                                    </div>
                                  `;

                                  setGeneratedHtml(updatedHtmlContent);
                                }
                              }}
                              onBlur={(e) => {
                                const value = e.target.value;
                                if (!value) return; // N√£o validar campos vazios

                                let isValid = true;
                                let errorMessage = '';

                                // Validar e fazer auto-fill por CEP
                                if (field.name.toLowerCase().includes('cep') && value.replace(/\D/g, '').length >= 8) {
                                  const cepValidation = validateCEP(value);
                                  if (cepValidation.valid) {
                                    preencherPorCEP(value, field.name);
                                  } else {
                                    errorMessage = cepValidation.message || 'CEP inv√°lido';
                                    isValid = false;
                                  }
                                }
                                // Validar e fazer auto-fill por CPF
                                else if ((field.name.toLowerCase().includes('cpf') && !field.name.toLowerCase().includes('cnpj')) && value.replace(/\D/g, '').length >= 11) {
                                  const cpfValidation = validateCPF(value);
                                  if (cpfValidation.valid) {
                                    preencherPorCPF(value, field.name);
                                  } else {
                                    errorMessage = cpfValidation.message || 'CPF inv√°lido';
                                    isValid = false;
                                  }
                                }
                                // Validar e fazer auto-fill por CNPJ
                                else if (field.name.toLowerCase().includes('cnpj') && value.replace(/\D/g, '').length >= 14) {
                                  const cnpjValidation = validateCNPJ(value);
                                  if (cnpjValidation.valid) {
                                    preencherPorCNPJ(value, field.name);
                                  } else {
                                    errorMessage = cnpjValidation.message || 'CNPJ inv√°lido';
                                    isValid = false;
                                  }
                                }
                                // Validar telefone
                                else if ((field.name.toLowerCase().includes('telefone') || field.name.toLowerCase().includes('fone')) && value.length > 0) {
                                  const telefoneValidation = validateTelefone(value);
                                  if (!telefoneValidation.valid) {
                                    errorMessage = telefoneValidation.message || 'Telefone inv√°lido';
                                    isValid = false;
                                  }
                                }

                                // Aplicar estilo visual para campos inv√°lidos
                                if (!isValid && value.length > 0) {
                                  e.target.style.borderColor = '#ef4444';
                                  e.target.style.boxShadow = '0 0 0 1px #ef4444';
                                  e.target.title = errorMessage;

                                  // Mostrar tooltip de erro
                                  const errorTooltip = document.createElement('div');
                                  errorTooltip.innerHTML = errorMessage;
                                  errorTooltip.style.cssText = `
                                    position: absolute; top: -2.5rem; left: 0; z-index: 1000;
                                    background: #ef4444; color: white; padding: 0.5rem;
                                    border-radius: 0.25rem; font-size: 0.75rem;
                                    white-space: nowrap; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                                  `;
                                  e.target.parentElement?.appendChild(errorTooltip);
                                  setTimeout(() => {
                                    if (errorTooltip.parentElement) {
                                      errorTooltip.parentElement.removeChild(errorTooltip);
                                    }
                                  }, 3000);
                                } else {
                                  e.target.style.borderColor = '';
                                  e.target.style.boxShadow = '';
                                  e.target.title = '';
                                }
                              }}
                              placeholder={field.placeholder}
                              style={{
                                paddingRight: (
                                  field.name.toLowerCase().includes('cep') ||
                                  field.name.toLowerCase().includes('cpf') ||
                                  field.name.toLowerCase().includes('cnpj') ||
                                  field.name.toLowerCase().includes('telefone') ||
                                  field.name.toLowerCase().includes('fone')
                                ) ? '2.5rem' : undefined
                              }}
                            />

                            {/* √çcone indicativo de auto-preenchimento */}
                            {(field.name.toLowerCase().includes('cep') ||
                              field.name.toLowerCase().includes('cpf') ||
                              field.name.toLowerCase().includes('cnpj')) && (
                              <div style={{
                                position: 'absolute',
                                right: '0.5rem',
                                top: '50%',
                                transform: 'translateY(-50%)',
                                fontSize: '1rem',
                                color: 'var(--color-primary)',
                                cursor: 'help'
                              }}
                              title="Campo com preenchimento autom√°tico">
                                üîç
                              </div>
                            )}
                          </div>
                        )}

                        {/* Dicas de preenchimento autom√°tico e valida√ß√£o */}
                        {(field.name.toLowerCase().includes('cep') ||
                          field.name.toLowerCase().includes('cpf') ||
                          field.name.toLowerCase().includes('cnpj') ||
                          field.name.toLowerCase().includes('telefone') ||
                          field.name.toLowerCase().includes('fone')) && (
                          <div style={{
                            fontSize: '0.75rem',
                            color: 'var(--color-textSecondary)',
                            marginTop: '0.25rem',
                            fontStyle: 'italic',
                            background: 'var(--color-surface)',
                            padding: '0.5rem',
                            borderRadius: '0.25rem',
                            border: '1px solid var(--color-border)'
                          }}>
                            {field.name.toLowerCase().includes('cep') &&
                              'üîç CEP com preenchimento autom√°tico (Ex: 01234-567 ou 01234567)'}
                            {(field.name.toLowerCase().includes('cpf') && !field.name.toLowerCase().includes('cnpj')) &&
                              'üîç CPF com preenchimento autom√°tico (Ex: 123.456.789-09)'}
                            {field.name.toLowerCase().includes('cnpj') &&
                              'üîç CNPJ com preenchimento autom√°tico (Ex: 12.345.678/0001-90)'}
                            {(field.name.toLowerCase().includes('telefone') || field.name.toLowerCase().includes('fone')) &&
                              'üìû Telefone com formata√ß√£o autom√°tica (Ex: (11) 99999-9999)'}
                          </div>
                        )}
                      </div>
                    );

                    const renderSection = (title: string, fields: any[], icon: string, sectionKey: string) => {
                      if (fields.length === 0) return null;

                      // Organizar campos da se√ß√£o em ordem l√≥gica
                      const fieldOrder = [
                        'cpf', 'cnpj', 'nome', 'razao_social', 'nome_fantasia',
                        'nacionalidade', 'estado_civil', 'profissao', 'cargo', 'rg',
                        'cep', 'endereco', 'numero', 'bairro', 'cidade', 'uf',
                        'telefone', 'email', 'nascimento', 'genero'
                      ];

                      const orderedFields = [...fields].sort((a, b) => {
                        const aOrder = fieldOrder.findIndex(o => a.name.toLowerCase().includes(o));
                        const bOrder = fieldOrder.findIndex(o => b.name.toLowerCase().includes(o));

                        if (aOrder === -1 && bOrder === -1) return 0;
                        if (aOrder === -1) return 1;
                        if (bOrder === -1) return -1;
                        return aOrder - bOrder;
                      });

                      return (
                        <div key={title} style={{
                          marginBottom: '2rem',
                          padding: '1.5rem',
                          background: 'var(--color-surface)',
                          borderRadius: 'var(--radius)',
                          border: '1px solid var(--color-border)',
                          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                        }}>
                          <div style={{
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center',
                            marginBottom: '1.5rem',
                            paddingBottom: '1rem',
                            borderBottom: '2px solid var(--color-primary)'
                          }}>
                            <h5 style={{
                              margin: '0',
                              fontSize: '1.2rem',
                              fontWeight: '700',
                              color: 'var(--color-primary)',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem'
                            }}>
                              {icon} {title}
                            </h5>
                            <div style={{
                              fontSize: '0.8rem',
                              color: 'var(--color-textSecondary)',
                              background: 'var(--color-background)',
                              padding: '0.25rem 0.5rem',
                              borderRadius: '0.25rem',
                              border: '1px solid var(--color-border)'
                            }}>
                              {orderedFields.length} campos
                            </div>
                          </div>

                          <div style={{
                            display: 'grid',
                            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                            gap: '1rem'
                          }}>
                            {orderedFields.map(renderField)}
                          </div>
                        </div>
                      );
                    };

                    const renderObjectSection = (title: string, fields: any[], icon: string) => {
                      if (fields.length === 0) return null;

                      return (
                        <div key={title} style={{
                          marginBottom: '2rem',
                          padding: '1.5rem',
                          background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
                          borderRadius: 'var(--radius)',
                          border: '1px solid var(--color-border)',
                          color: 'white'
                        }}>
                          <h5 style={{
                            margin: '0 0 1.5rem 0',
                            fontSize: '1.2rem',
                            fontWeight: '700',
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.5rem'
                          }}>
                            {icon} {title}
                          </h5>

                          <div style={{
                            display: 'grid',
                            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
                            gap: '1rem'
                          }}>
                            {fields.map(field => (
                              <div key={field.name} style={{ marginBottom: '1rem' }}>
                                <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: '600', color: 'white' }}>
                                  {field.label} {field.required && <span style={{ color: '#ffc107' }}>*</span>}
                                </label>

                                {field.type === 'textarea' ? (
                                  <textarea
                                    className="input"
                                    value={formData[field.name] || ''}
                                    onChange={(e) => setFormData(prev => ({ ...prev, [field.name]: e.target.value }))}
                                    placeholder={field.placeholder}
                                    rows={4}
                                    style={{
                                      background: 'rgba(255,255,255,0.95)',
                                      color: 'black',
                                      border: '1px solid rgba(255,255,255,0.3)'
                                    }}
                                  />
                                ) : field.type === 'select' ? (
                                  <select
                                    className="input"
                                    value={formData[field.name] || ''}
                                    onChange={(e) => setFormData(prev => ({ ...prev, [field.name]: e.target.value }))}
                                    style={{
                                      background: 'rgba(255,255,255,0.95)',
                                      color: 'black',
                                      border: '1px solid rgba(255,255,255,0.3)'
                                    }}
                                  >
                                    <option value="">Selecione...</option>
                                    {field.options?.map((option: string) => (
                                      <option key={option} value={option}>{option}</option>
                                    ))}
                                  </select>
                                ) : (
                                  <input
                                    type={field.type}
                                    className="input"
                                    value={formData[field.name] || ''}
                                    onChange={(e) => {
                                      const maskedValue = applyMask(e.target.value, field.name);
                                      setFormData(prev => ({ ...prev, [field.name]: maskedValue }));
                                    }}
                                    placeholder={field.placeholder}
                                    style={{
                                      background: 'rgba(255,255,255,0.95)',
                                      color: 'black',
                                      border: '1px solid rgba(255,255,255,0.3)'
                                    }}
                                  />
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    };

                    // Mapeamento de se√ß√µes com seus respectivos √≠cones e t√≠tulos
                    const sectionConfig = {
                      outorgante: { title: 'Dados do Outorgante', icon: 'üë§', color: '#3b82f6' },
                      procurador: { title: 'Dados do Procurador', icon: 'ü§ù', color: '#8b5cf6' },
                      contratante: { title: 'Dados do Contratante', icon: 'üè¢', color: '#06b6d4' },
                      contratado: { title: 'Dados do Contratado', icon: 'üë•', color: '#10b981' },
                      vendedor: { title: 'Dados do Vendedor', icon: 'üí∞', color: '#f59e0b' },
                      comprador: { title: 'Dados do Comprador', icon: 'üõí', color: '#ef4444' },
                      locador: { title: 'Dados do Locador (Propriet√°rio)', icon: 'üè†', color: '#84cc16' },
                      locatario: { title: 'Dados do Locat√°rio (Inquilino)', icon: 'üóùÔ∏è', color: '#a855f7' },
                      empregador: { title: 'Dados do Empregador (Empresa)', icon: 'üè≠', color: '#0ea5e9' },
                      empregado: { title: 'Dados do Empregado', icon: 'üë®‚Äçüíº', color: '#14b8a6' },
                      empresa: { title: 'Dados da Empresa/Institui√ß√£o', icon: 'üè¢', color: '#6366f1' },
                      estagiario: { title: 'Dados do Estagi√°rio', icon: 'üéì', color: '#f97316' },
                      declarante: { title: 'Dados do Declarante', icon: 'üìù', color: '#8b5cf6' },
                      residente: { title: 'Dados do Residente', icon: 'üèòÔ∏è', color: '#06b6d4' },
                      paciente: { title: 'Dados do Paciente', icon: 'ü©∫', color: '#0ea5e9' },
                      medico: { title: 'Dados do M√©dico', icon: 'üë®‚Äç‚öïÔ∏è', color: '#14b8a6' },
                      funcionario: { title: 'Dados do Funcion√°rio', icon: 'üë®‚Äçüíº', color: '#10b981' },
                      companheiro1: { title: 'Dados do Companheiro 1', icon: 'üíë', color: '#ec4899' },
                      companheiro2: { title: 'Dados do Companheiro 2', icon: 'üíè', color: '#be185d' },
                      testemunha: { title: 'Dados das Testemunhas', icon: 'üë•', color: '#6b7280' },
                      segurado: { title: 'Dados do Segurado', icon: 'üõ°Ô∏è', color: '#059669' },
                      seguradora: { title: 'Dados da Seguradora', icon: 'üè¶', color: '#0369a1' },
                      veiculo: { title: 'Dados do Ve√≠culo', icon: 'üöó', color: '#dc2626' },
                      imovel: { title: 'Dados do Im√≥vel/Obra', icon: 'üèóÔ∏è', color: '#ca8a04' },
                      objeto: { title: 'Objeto/Servi√ßos', icon: 'üìã', color: '#7c3aed' },
                      financeiro: { title: 'Informa√ß√µes Financeiras', icon: 'üí∞', color: '#059669' },
                      temporal: { title: 'Datas e Prazos', icon: 'üìÖ', color: '#dc2626' },
                      localizacao: { title: 'Localiza√ß√£o', icon: 'üìç', color: '#ea580c' },
                      outros: { title: 'Outras Informa√ß√µes', icon: 'üìÑ', color: '#6b7280' }
                    };

                    return (
                      <div style={{ display: 'flex', flexDirection: 'column', gap: '0' }}>
                        {/* Campo CEP para preenchimento autom√°tico global (se n√£o existir campo CEP espec√≠fico) */}
                        {!selectedTemplate.fields.some(f => f.name.toLowerCase().includes('cep')) &&
                         selectedTemplate.fields.some(f => f.name.toLowerCase().includes('endereco')) && (
                          <div style={{
                            marginBottom: '2rem',
                            padding: '1.5rem',
                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                            borderRadius: 'var(--radius)',
                            border: '1px solid var(--color-border)',
                            color: 'white',
                            boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'
                          }}>
                            <h5 style={{
                              margin: '0 0 1rem 0',
                              fontSize: '1.2rem',
                              fontWeight: '700',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '0.5rem'
                            }}>
                              üó∫Ô∏è CEP para Preenchimento Autom√°tico Global
                            </h5>
                            <div style={{ position: 'relative' }}>
                              <input
                                type="text"
                                className="input"
                                placeholder="Digite o CEP para preencher endere√ßos automaticamente"
                                value={formData['__cep_helper'] || ''}
                                onChange={(e) => {
                                  const maskedValue = formatCEP(e.target.value);
                                  setFormData(prev => ({ ...prev, '__cep_helper': maskedValue }));
                                }}
                                onBlur={(e) => {
                                  const value = e.target.value;
                                  if (value && validateCEP(value).valid) {
                                    preencherPorCEP(value, '__cep_helper');
                                  }
                                }}
                                style={{
                                  background: 'rgba(255,255,255,0.95)',
                                  color: 'black',
                                  border: '1px solid rgba(255,255,255,0.3)',
                                  paddingRight: '2.5rem'
                                }}
                              />
                              <div style={{
                                position: 'absolute',
                                right: '0.5rem',
                                top: '50%',
                                transform: 'translateY(-50%)',
                                fontSize: '1rem',
                                color: '#667eea'
                              }}>
                                üîç
                              </div>
                            </div>
                            <div style={{
                              fontSize: '0.85rem',
                              marginTop: '0.5rem',
                              opacity: 0.9,
                              fontStyle: 'italic',
                              background: 'rgba(255,255,255,0.1)',
                              padding: '0.5rem',
                              borderRadius: '0.25rem'
                            }}>
                              üí° Este CEP ser√° usado para preencher automaticamente os campos de endere√ßo de todas as pessoas do documento
                            </div>
                          </div>
                        )}

                        {/* Renderizar se√ß√µes organizadas */}
                        {Object.entries(categorizedFields).map(([sectionKey, sectionFields]) => {
                          const config = sectionConfig[sectionKey as keyof typeof sectionConfig];
                          if (!config || sectionFields.length === 0) return null;

                          // Se√ß√µes especiais com estilo diferenciado
                          if (sectionKey === 'objeto' || sectionKey === 'financeiro' || sectionKey === 'temporal') {
                            return renderObjectSection(config.title, sectionFields, config.icon);
                          }

                          return renderSection(config.title, sectionFields, config.icon, sectionKey);
                        })}
                      </div>
                    );
                  })()}

                  <button
                    className="button button-primary"
                    onClick={generateDocument}
                    disabled={isGenerating}
                    style={{ marginTop: '2rem', width: '100%' }}
                  >
                    {isGenerating ? '‚è≥ Gerando...' : 'üöÄ Gerar Documento'}
                  </button>
                </div>

                {(generatedContent || selectedTemplate) && (
                  <div>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
                      <h4>üìÑ {generatedContent ? 'Documento Gerado' : 'Preview do Documento'}</h4>
                      {!generatedContent && (
                        <div style={{ fontSize: '0.9rem', color: 'var(--color-textSecondary)' }}>
                          <span style={{ color: '#92400e' }}>‚ö†Ô∏è Campos em amarelo</span> precisam ser preenchidos
                        </div>
                      )}
                    </div>

                    <div className="document-html-preview">
                      <div dangerouslySetInnerHTML={{ __html: generatedHtml }} />
                    </div>

                    {generatedContent && (
                      <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
                        <button className="button button-primary" onClick={printDocument}>
                          üñ®Ô∏è Imprimir
                        </button>
                        <button
                          className="button button-outline"
                          onClick={() => downloadDocument(generatedContent, selectedTemplate.name)}
                        >
                          üì• Download
                        </button>
                        <button
                          className="button button-outline"
                          onClick={() => downloadDocument(generatedContent, selectedTemplate.name, 'html')}
                        >
                          üåê Download HTML
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Companies Tab */}
      {activeTab === 'empresas' && (
        <div className="card">
          <EmpresaManager
            sistema="documentos"
            allowCreate={userRole === 'admin' || userRole === 'superadmin'}
            allowEdit={userRole === 'admin' || userRole === 'superadmin'}
            allowDelete={userRole === 'superadmin'}
            onEmpresaSelect={(empresa) => {
              console.log('Empresa selecionada para documentos:', empresa);
              // Implementar filtros de documentos por empresa
            }}
          />
        </div>
      )}

      {/* History Tab */}
      {activeTab === 'history' && (
        <div className="card">
          <h3>üìÇ Hist√≥rico de Documentos</h3>

          {documents.length > 0 ? (
            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
              {documents.map((document) => (
                <div
                  key={document.id}
                  style={{
                    padding: '1.5rem',
                    border: '1px solid var(--color-border)',
                    borderRadius: 'var(--radius)',
                    background: 'var(--color-surface)'
                  }}
                >
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
                    <div>
                      <h4 style={{ margin: 0 }}>{document.title}</h4>
                      <p style={{ margin: '0.5rem 0', color: 'var(--color-textSecondary)' }}>
                        Template: {document.templateName}
                        {document.aiGenerated && <span className="badge" style={{ marginLeft: '0.5rem' }}>ü§ñ IA</span>}
                      </p>
                      <small style={{ color: 'var(--color-textSecondary)' }}>
                        Criado em: {new Date(document.createdAt).toLocaleString('pt-BR')}
                      </small>
                    </div>
                    <div style={{ display: 'flex', gap: '0.5rem' }}>
                      <button
                        className="button button-outline"
                        onClick={() => {
                          setGeneratedContent(document.content);
                          setGeneratedHtml(document.htmlContent || document.content);
                          setActiveTab('generator');
                        }}
                      >
                        üëÅÔ∏è Ver
                      </button>
                      <button
                        className="button button-outline"
                        onClick={() => downloadDocument(document.content, document.title)}
                      >
                        üì• Download
                      </button>
                      <button
                        className="button button-ghost"
                        onClick={() => deleteDocument(document.id)}
                        style={{ color: 'red' }}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ textAlign: 'center', padding: '3rem', color: 'var(--color-textSecondary)' }}>
              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üìÇ</div>
              <p>Nenhum documento encontrado</p>
            </div>
          )}
        </div>
      )}


    </div>
  );
}