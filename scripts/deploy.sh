
#!/bin/bash

echo "üöÄ Iniciando processo de deploy com verifica√ß√µes de seguran√ßa..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. Verifica√ß√µes de seguran√ßa
log_info "Executando verifica√ß√µes de seguran√ßa..."
npm run security:check || {
    log_error "Verifica√ß√µes de seguran√ßa falharam!"
    exit 1
}

# 2. Audit de depend√™ncias
log_info "Verificando vulnerabilidades nas depend√™ncias..."
npm audit --audit-level moderate || {
    log_warning "Vulnerabilidades encontradas nas depend√™ncias. Revise antes de continuar."
}

# 3. Verifica√ß√£o de TypeScript
log_info "Verificando tipos TypeScript..."
npx tsc --noEmit || {
    log_error "Erros de TypeScript encontrados!"
    exit 1
}

# 4. Testes de seguran√ßa
log_info "Executando testes de seguran√ßa..."
npm run test:security || {
    log_warning "Alguns testes de seguran√ßa falharam."
}

# 5. Build da aplica√ß√£o
log_info "Construindo aplica√ß√£o..."
npm run build || {
    log_error "Build falhou!"
    exit 1
}

# 6. Verificar arquivos cr√≠ticos
log_info "Verificando arquivos cr√≠ticos de seguran√ßa..."
CRITICAL_FILES=(
    "firestore.rules"
    "storage.rules"
    "next.config.js"
    ".env.local"
    "src/middleware.ts"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        log_error "Arquivo cr√≠tico n√£o encontrado: $file"
        exit 1
    fi
done

# 7. Deploy Firebase Rules
log_info "Fazendo deploy das regras do Firebase..."
firebase deploy --only firestore:rules,storage:rules || {
    log_error "Deploy das regras falhou!"
    exit 1
}

# 8. Deploy da aplica√ß√£o
log_info "Deploy da aplica√ß√£o para Replit..."
# O deploy no Replit acontece automaticamente, mas podemos verificar a sa√∫de do servi√ßo
curl -f http://0.0.0.0:5000/api/health/security || {
    log_warning "Health check da aplica√ß√£o falhou"
}

log_info "‚úÖ Deploy conclu√≠do com sucesso!"

# 9. Verifica√ß√µes p√≥s-deploy
log_info "Executando verifica√ß√µes p√≥s-deploy..."
sleep 5

# Verificar se a aplica√ß√£o est√° respondendo
log_info "Verificando se a aplica√ß√£o est√° online..."
curl -f http://0.0.0.0:5000/ || {
    log_warning "Aplica√ß√£o pode n√£o estar respondendo corretamente"
}

# Verificar headers de seguran√ßa
log_info "Verificando headers de seguran√ßa..."
curl -I http://0.0.0.0:5000/ | grep -E "(X-Frame-Options|Strict-Transport-Security|Content-Security-Policy)" || {
    log_warning "Headers de seguran√ßa podem estar faltando"
}

log_info "üéâ Deploy e verifica√ß√µes conclu√≠dos!"
